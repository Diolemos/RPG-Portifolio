%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1511.m00.i121.n035.S.c12.227387203 French royal lily flowers.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 11/20/2015
%%BoundingBox: 0 0 397 413
%%HiResBoundingBox: 0 0 396.9896 412.1653
%%CropBox: 0 0 396.9896 412.1653
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:ModifyDate>2015-11-18T23:58:08+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-11-18T23:58:08+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-11-18T23:58:08+03:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>248</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXmv5o/nDpHlzSJ&#xA;7fSLhLvXJmkt4RGQyQOgAeRz0PAtQD+bY9DiqQfk1+cun3GjjRPM136F7YIPq99MSRNACAObfzR1&#xA;3J/Z3PQnFXtCOjorowZGAKsDUEHcEEYq3irsVdirsVdiqyeeG3gknndYoYlLyyOaKqqKsxJ6ADFX&#xA;lH5efnNa+YfPmr6TPJ6djeOG0AvtUQrwZN+hlC+oB8xir1rFXYq7FXYq7FXYqsmmhgiaaaRYokHJ&#xA;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&#xA;mgVeuYq7FX//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:6aa6ccf2-9305-064e-bbed-10ea8f311e7a</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:6aa6ccf2-9305-064e-bbed-10ea8f311e7a</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:27cc6efb-fc53-2943-a23e-f45b6712f5cd</stRef:instanceID>
            <stRef:documentID>xmp.did:27cc6efb-fc53-2943-a23e-f45b6712f5cd</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:27cc6efb-fc53-2943-a23e-f45b6712f5cd</stEvt:instanceID>
                  <stEvt:when>2015-11-15T22:45:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6aa6ccf2-9305-064e-bbed-10ea8f311e7a</stEvt:instanceID>
                  <stEvt:when>2015-11-18T23:58:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <pdf:Producer>Adobe PDF Library 9.9</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -412.165 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 412.165 li
396.99 412.165 li
396.99 0 li
cp
clp
375.847 248.1 mo
375.846 248.101 372.531 250.407 369.902 253.324 cv
364.989 260.219 363.362 266.81 362.85 271.02 cv
362.64 271.02 li
362.707 268.038 362.914 264.526 363.958 259.73 cv
362.696 257.586 361.591 253.978 361.591 251.834 cv
361.591 253.468 363.696 255.823 364.748 256.647 cv
365.099 255.457 365.503 254.266 365.982 253.092 cv
363.813 250.553 361.591 246.434 362.304 242.159 cv
361.812 245.108 365.419 249.211 366.929 251.046 cv
367.424 250.112 368.339 248.395 368.946 247.515 cv
362.304 242.159 363.192 243.569 370.179 245.871 cv
371.175 244.868 373.761 242.301 374.991 241.472 cv
367.249 239.949 367.002 227.454 359.556 220.656 cv
352.003 227.631 351.864 239.949 344.122 241.472 cv
345.352 242.301 347.938 244.868 348.934 245.871 cv
355.921 243.569 356.809 242.159 350.167 247.515 cv
350.774 248.395 351.689 250.112 352.184 251.046 cv
353.694 249.211 357.301 245.108 356.809 242.159 cv
357.522 246.434 355.3 250.553 353.131 253.092 cv
353.61 254.266 354.014 255.457 354.365 256.647 cv
355.417 255.823 357.522 253.468 357.522 251.834 cv
357.522 253.978 356.417 257.586 355.155 259.73 cv
356.199 264.526 356.406 268.038 356.473 271.02 cv
356.263 271.02 li
355.75 266.81 354.124 260.219 349.211 253.324 cv
346.582 250.407 343.267 248.101 343.266 248.1 cv
330.289 241.609 318.449 254.85 328.365 265.033 cv
330.539 267.265 335.592 269.603 342.91 268.808 cv
337.672 269.377 333.559 262.421 341.392 263.171 cv
342.118 257.321 348.864 263.569 350.142 267.521 cv
348.309 257.846 338.702 252.902 333.059 254.996 cv
328.059 257.809 329.993 262.364 331.809 264.573 cv
326.434 260.621 329.059 254.096 333.059 253.196 cv
342.301 250.037 352.559 261.071 352.559 270.746 cv
352.407 271.932 349.124 272.546 343.625 271.02 cv
343.625 275.654 li
347.494 275.654 li
349.966 276.059 351.308 277.265 351.786 278.711 cv
353.006 281.196 351.022 284.055 349.309 285.596 cv
346.309 287.396 343.309 288.409 340.829 285.713 cv
342.187 286.55 348.892 288.446 350.559 281.804 cv
349.325 283.434 344.203 285.199 344.192 280.157 cv
343.875 280.368 343.536 280.539 343.182 280.652 cv
342.459 280.966 341.674 281.119 340.842 280.913 cv
339.619 280.609 338.858 279.624 338.546 278.569 cv
338.246 277.56 338.211 276.445 338.368 275.356 cv
332.949 281.971 335.257 292.589 347.924 289.409 cv
351.929 288.403 355.661 282.822 356.337 277.628 cv
355.983 282.36 354.71 287.453 349.468 290.318 cv
350.11 292.245 351.469 291.847 353.08 292.515 cv
355.051 290.554 356.809 286.316 356.809 283.157 cv
358.184 287.621 355.934 292.234 353.184 295.384 cv
353.48 295.932 356.559 295.046 357.095 297.64 cv
358.165 299.982 359.165 300.482 359.556 300.783 cv
359.948 300.482 360.948 299.982 362.018 297.64 cv
362.554 295.046 365.633 295.932 365.929 295.384 cv
363.179 292.234 360.929 287.621 362.304 283.157 cv
362.304 286.316 364.062 290.554 366.033 292.515 cv
367.645 291.847 369.003 292.245 369.645 290.318 cv
364.403 287.453 363.13 282.36 362.776 277.628 cv
363.452 282.822 367.184 288.403 371.189 289.409 cv
383.856 292.589 386.164 281.971 380.745 275.356 cv
380.902 276.445 380.867 277.56 380.567 278.569 cv
380.255 279.624 379.494 280.609 378.271 280.913 cv
377.439 281.119 376.654 280.966 375.931 280.652 cv
375.577 280.539 375.238 280.368 374.921 280.157 cv
374.91 285.199 369.788 283.434 368.554 281.804 cv
370.221 288.446 376.926 286.55 378.284 285.713 cv
375.804 288.409 372.804 287.396 369.804 285.596 cv
368.091 284.055 366.107 281.196 367.327 278.711 cv
367.805 277.265 369.147 276.059 371.619 275.654 cv
375.488 275.654 li
375.488 271.02 li
369.989 272.546 366.706 271.932 366.554 270.746 cv
366.554 261.071 376.812 250.037 386.054 253.196 cv
390.054 254.096 392.679 260.621 387.304 264.573 cv
389.12 262.364 391.054 257.809 386.054 254.996 cv
380.411 252.902 370.804 257.846 368.971 267.521 cv
370.249 263.569 376.995 257.321 377.721 263.171 cv
385.554 262.421 381.441 269.377 376.203 268.808 cv
383.521 269.603 388.574 267.265 390.748 265.033 cv
400.664 254.85 388.824 241.609 375.847 248.1 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 .72 cmyk
f
391.608 153.147 mo
401.539 140.008 381.439 136.759 371.931 145.87 cv
371.492 146.291 365.121 151.09 362.887 159.754 cv
363.429 157.068 364.458 154.444 365.822 152 cv
368.154 147.824 371.931 141.981 376.196 139.173 cv
376.309 139.098 376.448 139.035 376.588 138.971 cv
376.987 139.137 377.427 139.237 377.895 139.237 cv
378.561 139.237 379.178 139.049 379.685 138.73 cv
379.682 138.727 li
379.799 138.685 379.912 138.632 380.017 138.567 cv
380.442 138.302 380.702 137.867 380.775 137.409 cv
380.831 137.305 380.872 137.199 380.9 137.09 cv
381.065 136.789 381.129 136.481 381.107 136.179 cv
381.11 136.179 381.112 136.18 381.115 136.18 cv
382.594 136.18 383.792 135.101 383.792 133.771 cv
383.792 133.387 383.683 133.029 383.506 132.707 cv
383.538 132.709 383.568 132.716 383.601 132.716 cv
384.569 132.716 385.353 132.01 385.353 131.139 cv
385.353 130.268 384.569 129.562 383.601 129.562 cv
382.633 129.562 381.849 130.268 381.849 131.139 cv
381.849 131.255 381.865 131.367 381.891 131.476 cv
381.644 131.409 381.387 131.362 381.115 131.362 cv
379.673 131.362 378.506 132.39 378.449 133.675 cv
378.262 133.636 378.075 133.611 377.894 133.612 cv
376.169 133.612 374.77 134.871 374.77 136.424 cv
374.77 136.626 374.796 136.821 374.84 137.011 cv
372.879 139.768 370.967 142.553 369.119 145.372 cv
366.477 149.401 363.909 153.647 362.542 158.116 cv
364.047 151.936 366.312 145.142 369.099 139.886 cv
375.875 127.106 380.52 128.822 378.256 122.815 cv
375.432 118.956 372.18 119.645 369.469 122.296 cv
369.51 121.916 369.531 121.523 369.531 121.106 cv
369.531 115.949 363.577 117.522 359.556 109.691 cv
355.536 117.522 349.582 115.949 349.582 121.106 cv
349.582 121.523 349.603 121.916 349.644 122.296 cv
346.933 119.645 343.681 118.956 340.857 122.815 cv
338.593 128.822 343.238 127.106 350.014 139.886 cv
352.801 145.142 355.066 151.936 356.571 158.116 cv
355.204 153.647 352.636 149.401 349.994 145.372 cv
348.146 142.553 346.234 139.768 344.273 137.011 cv
344.317 136.821 344.343 136.626 344.343 136.424 cv
344.343 134.871 342.944 133.612 341.219 133.612 cv
341.038 133.611 340.852 133.636 340.664 133.675 cv
340.607 132.39 339.44 131.362 337.998 131.362 cv
337.726 131.362 337.469 131.409 337.222 131.476 cv
337.249 131.367 337.264 131.255 337.264 131.139 cv
337.264 130.268 336.48 129.562 335.512 129.562 cv
334.544 129.562 333.76 130.268 333.76 131.139 cv
333.76 132.01 334.544 132.716 335.512 132.716 cv
335.545 132.716 335.575 132.709 335.607 132.707 cv
335.43 133.029 335.321 133.387 335.321 133.771 cv
335.321 135.101 336.519 136.18 337.998 136.18 cv
338.001 136.18 338.003 136.179 338.006 136.179 cv
337.984 136.481 338.048 136.789 338.213 137.09 cv
338.241 137.199 338.282 137.305 338.338 137.409 cv
338.411 137.867 338.671 138.302 339.096 138.567 cv
339.201 138.632 339.314 138.685 339.431 138.727 cv
339.428 138.73 li
339.935 139.049 340.552 139.237 341.218 139.237 cv
341.686 139.237 342.126 139.137 342.525 138.971 cv
342.665 139.035 342.805 139.098 342.917 139.173 cv
347.182 141.981 350.959 147.824 353.291 152 cv
354.655 154.444 355.684 157.068 356.226 159.754 cv
353.992 151.09 347.621 146.291 347.182 145.87 cv
337.674 136.759 317.574 140.008 327.504 153.147 cv
319.365 158.918 325.205 167.787 332.368 165.553 cv
338.066 170.622 340.671 167.15 341.017 167.025 cv
339.461 167.588 332.705 162.83 334.484 157.417 cv
334.84 156.335 335.37 155.41 336.026 154.637 cv
335.85 155.05 335.743 155.493 335.743 155.962 cv
335.743 158.016 337.594 159.682 339.878 159.682 cv
342.161 159.682 344.012 158.016 344.012 155.962 cv
344.012 153.907 342.161 152.241 339.878 152.241 cv
339.782 152.241 339.692 152.26 339.598 152.266 cv
345.03 150.495 352.625 154.135 353.976 163.871 cv
345.323 163.871 li
345.323 168.504 li
354.059 168.504 li
353.708 170.829 352.633 173.868 350.183 175.201 cv
350.014 172.867 348.033 171.023 345.608 171.023 cv
343.072 171.023 341.017 173.037 341.017 175.522 cv
341.017 178.007 343.072 180.022 345.608 180.022 cv
346.077 180.022 346.528 179.952 346.954 179.824 cv
346.902 179.89 346.85 179.956 346.798 180.022 cv
351.131 178.872 355.846 174.742 356.809 168.504 cv
357.749 168.504 li
357.963 171.586 357.195 174.722 355.531 177.424 cv
354.301 179.421 352.583 181.228 351.958 183.441 cv
351.697 184.367 351.696 185.479 352.472 186.131 cv
353.151 186.702 354.22 186.694 355.064 186.317 cv
356.447 188.592 358.526 190.347 359.556 192.054 cv
360.586 190.347 362.667 188.592 364.049 186.317 cv
364.893 186.694 365.962 186.702 366.641 186.131 cv
367.417 185.479 367.417 184.367 367.155 183.441 cv
366.53 181.228 364.812 179.421 363.582 177.424 cv
361.918 174.722 361.15 171.586 361.364 168.504 cv
362.305 168.504 li
363.267 174.742 367.982 178.872 372.315 180.022 cv
372.263 179.956 372.211 179.89 372.159 179.824 cv
372.585 179.952 373.036 180.022 373.505 180.022 cv
376.041 180.022 378.096 178.007 378.096 175.522 cv
378.096 173.037 376.041 171.023 373.505 171.023 cv
371.08 171.023 369.099 172.867 368.93 175.201 cv
366.48 173.868 365.405 170.829 365.054 168.504 cv
373.79 168.504 li
373.79 163.871 li
365.137 163.871 li
366.488 154.135 374.083 150.495 379.515 152.266 cv
379.421 152.26 379.331 152.241 379.235 152.241 cv
376.952 152.241 375.101 153.907 375.101 155.962 cv
375.101 158.016 376.952 159.682 379.235 159.682 cv
381.518 159.682 383.37 158.016 383.37 155.962 cv
383.37 155.493 383.263 155.05 383.087 154.637 cv
383.743 155.41 384.273 156.335 384.629 157.417 cv
386.408 162.83 379.652 167.588 378.096 167.025 cv
378.442 167.15 381.047 170.622 386.745 165.553 cv
393.908 167.787 399.748 158.918 391.608 153.147 cv
cp
f
372.281 35.9666 mo
372.279 35.9678 365.678 40.0909 362.759 52.0971 cv
363.758 45.224 365.996 38.8758 371.342 33.5767 cv
374.967 30.6437 380.424 28.4834 386.743 30.1035 cv
393.873 27.8084 393.495 20.1127 387.877 14.7122 cv
388.201 17.5474 386.96 20.2758 384.474 21.0578 cv
373.825 24.4078 364.888 36.7054 363.473 42.3186 cv
364.705 35.5122 370.103 26.0412 377.058 22.8129 cv
372.104 22.0033 374.104 16.7036 369.821 17.4993 cv
372.646 15.1848 369 10.1218 366.083 13.1596 cv
366.326 8.80543 363.246 4.9271 359.556 3.16461 cv
355.867 4.9271 352.787 8.80543 353.03 13.1596 cv
350.113 10.1218 346.467 15.1848 349.292 17.4993 cv
345.009 16.7036 347.009 22.0033 342.055 22.8129 cv
349.01 26.0412 354.408 35.5122 355.64 42.3186 cv
354.225 36.7054 345.288 24.4078 334.639 21.0578 cv
332.153 20.2758 330.912 17.5474 331.236 14.7122 cv
325.618 20.1127 325.24 27.8084 332.37 30.1035 cv
338.689 28.4834 344.146 30.6437 347.771 33.5767 cv
353.117 38.8758 355.355 45.224 356.354 52.0971 cv
353.435 40.0909 346.834 35.9678 346.832 35.9666 cv
332.694 24.7031 318.638 38.9807 329.453 47.7902 cv
331.746 49.6579 342.092 51.8406 346.589 46.2713 cv
343.726 49.8174 328.967 43.6386 337.231 38.4744 cv
344.796 33.7469 359.436 52.965 347.439 52.7519 cv
349.87 50.828 348.655 48.5472 348.412 46.8789 cv
348.412 46.8789 343.672 53.7645 338.689 54.2708 cv
343.307 54.7771 349.019 61.4602 349.019 61.4602 cv
349.019 61.4602 349.991 57.0048 347.557 56.1075 cv
356.432 54.372 350.109 68.3377 342.443 65.2068 cv
340.327 64.3427 339.816 60.3108 341.728 58.8274 cv
332.856 65.7131 339.096 71.3658 348.248 68.6485 cv
352.055 67.5181 355.77 62.7199 356.427 58.0451 cv
356.082 62.3041 354.844 66.8886 349.748 69.4668 cv
350.443 71.3977 353.88 71.9911 355.703 69.4597 cv
353.88 71.9911 353.394 75.6365 357.163 76.0575 cv
358.204 78.1654 359.176 78.6158 359.556 78.8866 cv
359.937 78.6158 360.909 78.1654 361.949 76.0575 cv
365.719 75.6365 365.233 71.9911 363.41 69.4597 cv
365.233 71.9911 368.67 71.3977 369.365 69.4668 cv
364.269 66.8886 363.031 62.3041 362.686 58.0451 cv
363.343 62.7199 367.058 67.5181 370.865 68.6485 cv
380.017 71.3658 386.257 65.7131 377.385 58.8274 cv
379.297 60.3108 378.786 64.3427 376.671 65.2068 cv
369.004 68.3377 362.681 54.372 371.556 56.1075 cv
369.122 57.0048 370.094 61.4602 370.094 61.4602 cv
370.094 61.4602 375.806 54.7771 380.424 54.2708 cv
375.441 53.7645 370.701 46.8789 370.701 46.8789 cv
370.458 48.5472 369.243 50.828 371.674 52.7519 cv
359.677 52.965 374.317 33.7469 381.882 38.4744 cv
390.146 43.6386 375.387 49.8174 372.524 46.2713 cv
377.021 51.8406 387.367 49.6579 389.66 47.7902 cv
400.475 38.9807 386.419 24.7031 372.281 35.9666 cv
cp
f
337.489 373.805 mo
337.489 376.166 339.616 378.08 342.239 378.08 cv
344.862 378.08 346.989 376.166 346.989 373.805 cv
346.989 371.444 344.862 369.53 342.239 369.53 cv
339.616 369.53 337.489 371.444 337.489 373.805 cv
cp
f
368.715 361.687 mo
368.714 361.689 360.599 368.664 361.408 383.83 cv
361.412 383.913 361.422 383.992 361.428 384.075 cv
360.122 384.075 li
360.111 378.577 360.561 375.336 361.838 371.083 cv
364.065 364.176 367.922 357.516 373.82 354.728 cv
381.081 351.296 373.306 351.353 372.212 345.689 cv
372.091 345.061 370.514 346.28 369.006 347.642 cv
369.383 346.774 369.604 345.885 369.604 344.652 cv
369.604 339.684 363.293 337.36 359.556 330.068 cv
355.82 337.36 349.509 339.684 349.509 344.652 cv
349.509 345.885 349.73 346.774 350.107 347.642 cv
348.599 346.28 347.022 345.061 346.901 345.689 cv
345.807 351.353 338.032 351.296 345.293 354.728 cv
351.191 357.516 355.048 364.176 357.275 371.083 cv
358.552 375.336 359.003 378.577 358.991 384.075 cv
357.685 384.075 li
357.691 383.992 357.701 383.913 357.705 383.83 cv
358.514 368.664 350.399 361.689 350.398 361.687 cv
341.136 351.186 322.124 358.41 322.124 371.556 cv
322.124 390.914 345.613 389.47 346.898 377.034 cv
342.577 381.578 335.741 379.001 335.807 374.125 cv
335.951 363.466 353.702 366.481 354.178 383.83 cv
354.184 383.907 354.183 383.993 354.186 384.075 cv
347.243 384.075 li
347.243 388.708 li
353.307 388.708 li
351.285 394.347 345.8 400.643 336.815 393.804 cv
343.848 402.612 353.926 398.813 356.888 388.708 cv
358.783 388.708 li
356.957 399.73 350.641 398.36 350.635 401.375 cv
350.627 405.812 357.248 408.538 359.556 411.065 cv
361.865 408.538 368.486 405.812 368.478 401.375 cv
368.472 398.36 362.156 399.73 360.33 388.708 cv
362.225 388.708 li
365.187 398.813 375.265 402.612 382.298 393.804 cv
373.313 400.643 367.828 394.347 365.806 388.708 cv
371.87 388.708 li
371.87 384.075 li
364.927 384.075 li
364.93 383.993 364.929 383.907 364.935 383.83 cv
365.411 366.481 383.162 363.466 383.306 374.125 cv
383.372 379.001 376.536 381.578 372.215 377.034 cv
373.5 389.47 396.99 390.914 396.99 371.556 cv
396.99 358.41 377.977 351.186 368.715 361.687 cv
cp
f
376.874 378.08 mo
379.497 378.08 381.624 376.166 381.624 373.805 cv
381.624 371.444 379.497 369.53 376.874 369.53 cv
374.25 369.53 372.124 371.444 372.124 373.805 cv
372.124 376.166 374.25 378.08 376.874 378.08 cv
cp
f
46.8937 370.566 mo
46.8937 370.566 44.4614 376.473 43.2414 381.009 cv
43.2327 381.042 43.2283 381.07 43.2198 381.102 cv
41.5893 368.535 40.5472 353.189 45.1437 341.605 cv
44.1437 345.205 49.3937 348.693 49.2687 353.305 cv
48.2687 352.405 46.2687 351.505 45.2687 350.605 cv
43.6437 356.005 42.3558 365.642 44.1437 371.418 cv
46.0099 365.659 50.315 356.614 54.8825 352.688 cv
49.3937 352.518 52.6437 335.418 39.5565 328.967 cv
26.4693 335.418 29.7193 352.518 24.2305 352.688 cv
28.798 356.614 33.1031 365.659 34.9693 371.418 cv
36.7572 365.642 35.4693 356.005 33.8443 350.605 cv
32.8443 351.505 30.8443 352.405 29.8443 353.305 cv
29.7193 348.693 34.9693 345.205 33.9693 341.605 cv
38.5658 353.189 37.5237 368.535 35.8932 381.102 cv
35.8847 381.07 35.8804 381.042 35.8716 381.009 cv
34.6516 376.473 32.2193 370.566 32.2193 370.566 cv
17.7193 338.905 -8.6557 361.63 9.4489 377.058 cv
10.4336 377.897 15.9323 382.112 20.5168 381.757 cv
20.4001 381.438 li
14.5975 379.237 16.6631 374.232 19.514 373.148 cv
22.2572 372.106 25.9433 374.028 27.9693 375.58 cv
27.5943 371.418 24.6604 368.425 22.5943 367.03 cv
15.961 363.309 9.4368 370.175 12.3443 375.918 cv
9.3443 373.218 7.7392 368.73 9.7193 366.018 cv
12.5943 362.08 17.3443 361.63 22.2193 363.88 cv
27.7926 367.224 31.849 377.215 30.3443 380.643 cv
27.7616 374.289 19.2193 382.893 29.1595 383.236 cv
23.8153 383.236 li
27.7906 385.779 28.4334 389.988 26.543 393.05 cv
29.3752 391.991 31.4666 390.005 31.8443 386.605 cv
34.8443 391.105 30.8443 396.73 27.8443 397.63 cv
24.438 399.163 17.9321 398.524 15.3681 397.254 cv
18.5731 400.264 25.3815 403.288 30.5943 400.33 cv
34.0598 398.364 36.8247 393.699 36.8332 388.901 cv
37.8443 392.905 37.3443 397.63 31.9693 401.68 cv
31.9566 407.89 35.9512 407.462 38.7473 411.168 cv
39.0109 411.562 39.282 411.888 39.5565 412.165 cv
39.831 411.888 40.1021 411.562 40.3657 411.168 cv
43.1618 407.462 47.1564 407.89 47.1437 401.68 cv
41.7687 397.63 41.2687 392.905 42.2798 388.901 cv
42.2883 393.699 45.0532 398.364 48.5187 400.33 cv
53.7316 403.288 60.5399 400.264 63.7449 397.254 cv
61.1809 398.524 54.675 399.163 51.2687 397.63 cv
48.2687 396.73 44.2687 391.105 47.2687 386.605 cv
47.6464 390.005 49.7378 391.991 52.57 393.05 cv
50.6796 389.988 51.3224 385.779 55.2977 383.236 cv
49.9535 383.236 li
59.8937 382.893 51.3514 374.289 48.7687 380.643 cv
47.264 377.215 51.3204 367.224 56.8937 363.88 cv
61.7687 361.63 66.5187 362.08 69.3937 366.018 cv
71.3738 368.73 69.7687 373.218 66.7687 375.918 cv
69.6763 370.175 63.152 363.309 56.5187 367.03 cv
54.4526 368.425 51.5187 371.418 51.1437 375.58 cv
53.1697 374.028 56.8558 372.106 59.599 373.148 cv
62.4499 374.232 64.5155 379.237 58.7129 381.438 cv
58.5962 381.757 li
63.1807 382.112 68.6794 377.897 69.6641 377.058 cv
87.7687 361.63 61.3937 338.905 46.8937 370.566 cv
cp
f
79.113 39.7357 mo
75.1246 42.466 72.7263 39.4026 67.8746 36.9535 cv
59.9217 32.9391 43.836 38.5033 41.0651 52.1281 cv
42.605 42.6534 48.1844 33.5129 55.4996 33.016 cv
57.7079 32.8661 59.3348 31.4966 59.3348 30.316 cv
59.3348 29.1355 57.7912 27.3561 55.2704 27.3561 cv
53.7201 27.3561 41.3158 29.5573 40.6128 52.3259 cv
40.6584 46.0692 41.4936 32.1871 47.7496 26.6035 cv
56.4996 26.1535 57.6246 14.116 48.3746 10.066 cv
50.3746 12.8785 49.9996 16.4785 48.0921 16.4459 cv
48.1938 16.2176 48.2901 15.9919 48.3945 15.7626 cv
49.0432 14.3388 48.7033 13.0819 47.8365 11.7764 cv
47.6631 11.5152 47.4689 11.2522 47.257 10.9855 cv
45.2014 8.39736 41.5135 5.45823 39.5565 .606299 cv
37.5995 5.45823 33.9116 8.39736 31.856 10.9855 cv
31.6441 11.2522 31.4499 11.5152 31.2765 11.7764 cv
30.4097 13.0819 30.0698 14.3388 30.7185 15.7626 cv
30.8229 15.9919 30.9192 16.2176 31.0209 16.4459 cv
29.1134 16.4785 28.7384 12.8785 30.7384 10.066 cv
21.4884 14.116 22.6134 26.1535 31.3634 26.6035 cv
37.6194 32.1871 38.4546 46.0692 38.5002 52.3259 cv
37.7972 29.5573 25.3929 27.3561 23.8426 27.3561 cv
21.3218 27.3561 19.7782 29.1355 19.7782 30.316 cv
19.7782 31.4966 21.4051 32.8661 23.6134 33.016 cv
30.9286 33.5129 36.508 42.6534 38.0479 52.1281 cv
35.277 38.5033 19.1913 32.9391 11.2384 36.9535 cv
6.3867 39.4026 3.9884 42.466 0 39.7357 cv
1.1134 44.3785 2.4884 45.616 6.6106 44.2354 cv
1.1134 48.2035 1.2384 57.6535 10.8634 61.141 cv
8.2384 52.9285 22.6134 58.3285 22.4884 46.1785 cv
21.9884 51.691 10.8634 51.5785 10.9884 46.6285 cv
11.2592 35.906 31.319 41.6151 32.466 55.4781 cv
23.8133 55.4781 li
23.8133 60.1117 li
32.3503 60.1117 li
30.7138 64.9797 23.7298 68.2862 19.079 64.2046 cv
19.255 64.2327 19.4367 64.2487 19.623 64.2487 cv
21.1589 64.2487 22.4039 63.2466 22.4039 62.0104 cv
22.4039 60.7741 21.1589 59.7721 19.623 59.7721 cv
18.0872 59.7721 16.8422 60.7741 16.8422 62.0104 cv
16.8422 62.3808 16.6443 62.0731 16.8422 62.3808 cv
17.6832 69.4459 33.6878 70.2093 37.5944 61.4596 cv
36.833 63.4777 37.2491 65.6833 33.4884 67.7785 cv
28.2384 70.7035 30.1977 78.1219 24.8672 76.1548 cv
30.7799 80.2297 33.9976 77.0837 35.7348 74.8119 cv
35.7352 74.8128 li
35.8584 75.1552 35.999 75.4834 36.1487 75.8034 cv
36.1677 75.8442 36.1863 75.885 36.2057 75.9255 cv
36.5177 76.5751 36.8719 77.182 37.2397 77.7567 cv
37.2499 77.7728 37.26 77.7887 37.2702 77.8047 cv
37.6726 78.4307 38.0839 79.0206 38.4654 79.587 cv
38.6174 79.8129 38.766 80.0365 38.9048 80.2565 cv
38.92 80.2804 38.9336 80.3041 38.9486 80.328 cv
39.0812 80.5404 39.2033 80.7502 39.3179 80.959 cv
39.3511 81.0194 39.3832 81.0799 39.4146 81.1402 cv
39.4677 81.2422 39.5079 81.3433 39.5565 81.4449 cv
39.6051 81.3433 39.6453 81.2422 39.6984 81.1402 cv
39.7298 81.0799 39.7619 81.0194 39.7951 80.959 cv
39.9097 80.7502 40.0318 80.5404 40.1644 80.328 cv
40.1794 80.3041 40.193 80.2804 40.2082 80.2565 cv
40.347 80.0365 40.4956 79.8129 40.6476 79.587 cv
41.0291 79.0206 41.4404 78.4307 41.8428 77.8047 cv
41.853 77.7887 41.8631 77.7728 41.8733 77.7567 cv
42.2411 77.182 42.5953 76.5751 42.9073 75.9255 cv
42.9267 75.885 42.9453 75.8442 42.9643 75.8034 cv
43.114 75.4834 43.2546 75.1552 43.3778 74.8128 cv
43.3782 74.8119 li
45.1154 77.0837 48.3331 80.2297 54.2458 76.1548 cv
48.9153 78.1219 50.8746 70.7035 45.6246 67.7785 cv
41.8639 65.6833 42.28 63.4777 41.5186 61.4596 cv
45.4252 70.2093 61.4298 69.4459 62.2708 62.3808 cv
62.4687 62.0731 62.2708 62.3808 62.2708 62.0104 cv
62.2708 60.7741 61.0258 59.7721 59.49 59.7721 cv
57.9541 59.7721 56.7091 60.7741 56.7091 62.0104 cv
56.7091 63.2466 57.9541 64.2487 59.49 64.2487 cv
59.6763 64.2487 59.858 64.2327 60.034 64.2046 cv
55.3832 68.2862 48.3992 64.9797 46.7627 60.1117 cv
55.2997 60.1117 li
55.2997 55.4781 li
46.647 55.4781 li
47.794 41.6151 67.8538 35.906 68.1246 46.6285 cv
68.2496 51.5785 57.1246 51.691 56.6246 46.1785 cv
56.4996 58.3285 70.8746 52.9285 68.2496 61.141 cv
77.8746 57.6535 77.9996 48.2035 72.5024 44.2354 cv
76.6246 45.616 77.9996 44.3785 79.113 39.7357 cv
cp
f
241.986 183.185 mo
248.051 181.139 248.914 175.026 248.914 175.026 cv
247.853 176.601 245.054 178.112 243.184 178.439 cv
242.576 178.545 241.933 178.579 241.404 178.895 cv
240.859 179.221 240.52 179.795 240.106 180.277 cv
238.612 182.011 235.859 182.498 233.861 181.381 cv
236.132 183.152 239.258 184.106 241.986 183.185 cv
cp
f
230.479 141.301 mo
232.836 141.788 235.31 141.443 237.659 141.97 cv
241.61 142.856 244.57 146.021 246.996 149.309 cv
243.909 143.351 239.692 137.98 234.626 133.579 cv
235.055 135.383 235.995 137.063 237.308 138.372 cv
235.629 136.88 233.723 135.521 231.52 135.08 cv
229.67 134.71 227.761 135.014 225.874 135.003 cv
223.988 134.992 221.94 134.57 220.726 133.127 cv
222.905 136.918 226.196 140.418 230.479 141.301 cv
cp
f
221.169 161.212 mo
221.033 159.896 221.139 158.574 221.381 157.271 cv
221.565 156.492 221.824 155.738 222.214 155.031 cv
222.152 155.033 222.089 155.042 222.027 155.046 cv
222.033 155.037 222.037 155.028 222.043 155.02 cv
222.01 155 221.97 154.994 221.935 154.976 cv
221.952 154.92 221.966 154.863 221.983 154.807 cv
219.818 154.396 217.503 155.133 215.858 156.599 cv
214.214 158.064 213.011 159.924 213.011 162.987 cv
213.507 161.568 214.806 160.852 215.243 160.446 cv
214.777 161.715 214.578 163.077 214.73 164.425 cv
214.946 166.337 215.763 168.122 216.57 169.869 cv
216.473 168.295 217.45 166.762 218.83 166.033 cv
218.999 166.754 219.235 167.456 219.567 168.121 cv
220.546 170.078 222.426 171.677 224.605 171.876 cv
223.099 170.963 222.118 169.353 221.62 167.664 cv
221.517 167.316 221.442 166.962 221.373 166.607 cv
221.347 166.336 221.317 166.066 221.282 165.796 cv
221.829 166.143 224.058 166.972 224.605 167.319 cv
222.899 165.984 221.393 163.367 221.169 161.212 cv
cp
f
282.422 154.069 mo
284.905 154.255 287.011 153.184 288.347 149.588 cv
284.57 150.696 281.453 147.449 277.104 145.009 cv
271.165 141.678 261.283 144.31 257.176 153.958 cv
256.403 155.206 254.402 162.014 254.176 163.285 cv
254.148 161.837 254.775 159.079 255.241 156.414 cv
258.141 143.298 268.054 140.321 259.928 135.946 cv
274.943 132.809 264.104 130.922 266.048 123.54 cv
266.249 122.778 262.968 123.396 260.541 126.392 cv
260.632 126.165 260.718 125.94 260.812 125.711 cv
261.393 124.293 261.089 123.041 260.312 121.741 cv
260.156 121.481 259.982 121.219 259.792 120.953 cv
257.95 118.376 254.644 115.448 252.89 110.616 cv
251.136 115.448 247.83 118.376 245.987 120.953 cv
245.797 121.219 245.623 121.481 245.468 121.741 cv
244.691 123.041 244.386 124.293 244.968 125.711 cv
245.061 125.94 245.148 126.165 245.239 126.392 cv
242.812 123.396 239.531 122.778 239.731 123.54 cv
241.676 130.922 230.837 132.809 245.851 135.946 cv
237.726 140.321 247.639 143.298 250.539 156.414 cv
251.004 159.079 251.632 161.837 251.603 163.285 cv
251.377 162.014 249.377 155.206 248.604 153.958 cv
244.497 144.31 234.615 141.678 228.676 145.009 cv
224.327 147.449 221.209 150.696 217.432 149.588 cv
218.768 153.184 220.875 154.255 223.358 154.069 cv
221.005 158.833 222.112 165.331 228.461 168.155 cv
230.459 161.667 241.326 168.155 241.326 158.596 cv
239.854 163.32 229.761 162.431 229.971 158.596 cv
230.561 147.863 245.506 151.46 246.534 165.267 cv
238.778 169.882 li
246.43 169.882 li
244.963 174.73 238.703 178.023 234.534 173.958 cv
234.692 173.986 234.855 174.002 235.022 174.002 cv
236.399 174.002 237.515 173.004 237.515 171.773 cv
237.515 170.542 236.399 169.543 235.022 169.543 cv
233.645 169.543 232.779 170.307 232.529 172.142 cv
233.24 178.78 245.464 179.834 249.736 172.617 cv
249.88 172.475 250.309 170.977 250.449 170.83 cv
250.449 170.83 250.524 175.314 248.914 178.898 cv
247.438 182.181 243.61 186.741 239.723 185.86 cv
245.023 189.919 247.907 186.786 249.464 184.523 cv
249.465 184.524 li
249.575 184.865 249.701 185.192 249.835 185.51 cv
249.852 185.551 249.869 185.592 249.886 185.632 cv
250.166 186.279 250.483 186.883 250.813 187.456 cv
250.822 187.472 250.831 187.488 250.841 187.504 cv
251.201 188.127 251.57 188.715 251.912 189.279 cv
252.048 189.504 252.181 189.726 252.306 189.945 cv
252.319 189.969 252.331 189.993 252.345 190.017 cv
252.464 190.228 252.573 190.437 252.676 190.645 cv
252.706 190.705 252.734 190.766 252.763 190.826 cv
252.81 190.927 252.846 191.028 252.89 191.129 cv
252.933 191.028 252.969 190.927 253.017 190.826 cv
253.045 190.766 253.074 190.705 253.104 190.645 cv
253.206 190.437 253.316 190.228 253.435 190.017 cv
253.448 189.993 253.46 189.969 253.474 189.945 cv
253.598 189.726 253.732 189.504 253.868 189.279 cv
254.21 188.715 254.579 188.127 254.939 187.504 cv
254.948 187.488 254.957 187.472 254.967 187.456 cv
255.296 186.883 255.614 186.279 255.893 185.632 cv
255.911 185.592 255.927 185.551 255.944 185.51 cv
256.079 185.192 256.205 184.865 256.315 184.524 cv
256.315 184.523 li
257.873 186.786 260.757 189.919 266.057 185.86 cv
262.169 186.741 258.341 182.181 256.866 178.898 cv
255.255 175.314 255.33 170.83 255.33 170.83 cv
255.471 170.977 255.899 172.475 256.044 172.617 cv
260.315 179.834 272.539 178.78 273.25 172.142 cv
273 170.307 272.134 169.543 270.758 169.543 cv
269.381 169.543 268.265 170.542 268.265 171.773 cv
268.265 173.004 269.381 174.002 270.758 174.002 cv
270.925 174.002 271.088 173.986 271.245 173.958 cv
267.077 178.023 260.816 174.73 259.349 169.882 cv
267.002 169.882 li
259.246 165.267 li
260.274 151.46 275.219 147.863 275.808 158.596 cv
276.019 162.431 265.926 163.32 264.454 158.596 cv
264.454 168.155 275.321 161.667 277.319 168.155 cv
283.667 165.331 284.775 158.833 282.422 154.069 cv
cp
f
265.674 180.277 mo
265.259 179.795 264.921 179.221 264.376 178.895 cv
263.846 178.579 263.203 178.545 262.596 178.439 cv
260.725 178.112 257.926 176.601 256.866 175.026 cv
256.866 175.026 257.729 181.139 263.793 183.185 cv
266.522 184.106 269.647 183.152 271.919 181.381 cv
269.921 182.498 267.167 182.011 265.674 180.277 cv
cp
f
268.121 141.97 mo
270.47 141.443 272.943 141.788 275.301 141.301 cv
279.584 140.418 282.874 136.918 285.054 133.127 cv
283.839 134.57 281.791 134.992 279.905 135.003 cv
278.019 135.014 276.109 134.71 274.26 135.08 cv
272.057 135.521 270.15 136.88 268.472 138.372 cv
269.785 137.063 270.724 135.383 271.153 133.579 cv
266.087 137.98 261.87 143.351 258.783 149.309 cv
261.209 146.021 264.169 142.856 268.121 141.97 cv
cp
f
292.769 162.987 mo
292.769 159.924 291.566 158.064 289.921 156.599 cv
288.276 155.133 285.961 154.396 283.797 154.807 cv
283.813 154.863 283.828 154.92 283.844 154.976 cv
283.81 154.994 283.77 155 283.737 155.02 cv
283.743 155.028 283.747 155.037 283.753 155.046 cv
283.69 155.042 283.628 155.033 283.565 155.031 cv
283.956 155.738 284.215 156.492 284.398 157.271 cv
284.641 158.574 284.747 159.896 284.61 161.212 cv
284.387 163.367 282.881 165.984 281.175 167.319 cv
281.722 166.972 283.95 166.143 284.497 165.796 cv
284.463 166.066 284.433 166.336 284.407 166.607 cv
284.337 166.962 284.263 167.316 284.16 167.664 cv
283.661 169.353 282.68 170.963 281.175 171.876 cv
283.354 171.677 285.234 170.078 286.212 168.121 cv
286.545 167.456 286.781 166.754 286.949 166.033 cv
288.33 166.762 289.307 168.295 289.209 169.869 cv
290.016 168.122 290.834 166.337 291.05 164.425 cv
291.202 163.077 291.003 161.715 290.536 160.446 cv
290.973 160.852 292.272 161.568 292.769 162.987 cv
cp
f
24.7207 252.297 mo
26.2187 253.591 27.9577 254.686 29.7351 255.708 cv
31.2432 257.16 32.7513 258.612 34.2594 260.064 cv
31.6142 256.088 29.2784 251.949 27.2381 247.695 cv
25.6771 243.642 24.089 239.623 20.7221 236.698 cv
22.4598 239.11 23.4849 241.935 23.6648 244.805 cv
22.9073 242.615 21.3008 240.671 19.1882 239.388 cv
16.1188 237.524 11.7667 236.745 10.3747 233.657 cv
11.5782 238.666 13.2854 243.837 17.2861 247.484 cv
19.416 249.425 22.1006 250.844 24.7207 252.297 cv
cp
f
70.5522 263.634 mo
78.9424 261.334 74.0769 256.571 77.6364 253.001 cv
70.5174 253.211 64.1959 248.171 53.3127 254.891 cv
51.7574 255.851 43.2978 259.88 41.0903 270.812 cv
42.5398 261.819 46.5022 254.114 47.6245 252.392 cv
49.6245 249.323 51.6204 240.704 51.834 237.171 cv
50.8468 239.294 49.1915 242.302 47.1097 243.689 cv
47.1143 243.68 47.1189 243.672 47.1235 243.663 cv
47.6249 242.876 48.1134 242.078 48.5591 241.265 cv
52.2763 233.218 46.9602 226.071 46.3382 225.239 cv
46.1161 224.924 45.9305 224.647 45.8063 224.409 cv
44.7149 225.781 44.9173 225.902 44.2383 227.466 cv
44.0906 226.858 44.0063 226.19 43.5621 225.699 cv
41.5517 223.48 40.2711 221.706 39.5565 220.622 cv
38.8419 221.706 37.5613 223.48 35.5509 225.699 cv
35.1067 226.19 35.0224 226.858 34.8747 227.466 cv
34.1957 225.902 34.3981 225.781 33.3067 224.409 cv
33.1825 224.647 32.9969 224.924 32.7748 225.239 cv
32.1528 226.071 26.8367 233.218 30.5539 241.265 cv
30.9996 242.078 31.4881 242.876 31.9895 243.663 cv
31.9941 243.672 31.9987 243.68 32.0033 243.689 cv
29.9215 242.302 28.2662 239.294 27.279 237.171 cv
27.4926 240.704 29.4885 249.323 31.4885 252.392 cv
32.6108 254.114 36.5732 261.819 38.0227 270.812 cv
35.8152 259.88 27.3556 255.851 25.8003 254.891 cv
14.9171 248.171 8.5956 253.211 1.4766 253.001 cv
5.0361 256.571 .1706 261.334 8.5608 263.634 cv
-.3378 266.364 2.9676 273.801 6.2727 273.581 cv
7.3481 273.51 8.561 272.951 9.3238 272.321 cv
8.561 273.581 10.0865 274.841 10.0865 275.471 cv
11.8663 279.461 20.094 279.825 23.3075 276.216 cv
25.5957 274.089 25.0088 273.114 25.5383 270.15 cv
25.5461 270.106 25.4752 270.047 25.4649 270.09 cv
24.2409 275.215 14.1545 274.027 14.1531 267.478 cv
14.1507 257.75 33.8648 260.438 34.6072 276.124 cv
24.3535 276.124 li
24.3535 280.758 li
33.1067 280.758 li
31.657 282.483 29.4972 283.447 27.5049 283.858 cv
25.9993 284.169 24.4689 284.482 22.9183 284.432 cv
21.3676 284.382 19.7659 283.918 18.7903 282.921 cv
19.6085 285.578 22.5531 286.611 25.8003 287.022 cv
22.9656 287.705 19.4878 288.178 15.2766 285.538 cv
21.8815 296.245 35.605 290.717 38.6854 280.758 cv
38.6272 281.452 li
38.2065 283.486 37.7528 284.981 37.3055 286.117 cv
36.3063 288.069 34.9481 289.89 33.3143 291.469 cv
31.7947 292.938 29.9659 294.361 29.535 296.311 cv
31.2085 296.446 32.8707 296.015 34.2724 295.211 cv
33.9621 296.52 33.8129 298.276 32.4006 300.066 cv
35.9245 299.618 36.2505 298.546 37.0384 297.818 cv
37.8109 298.757 38.7853 299.868 39.5565 300.817 cv
40.3277 299.868 41.3021 298.757 42.0746 297.818 cv
42.8625 298.546 43.1885 299.618 46.7124 300.066 cv
45.3001 298.276 45.1509 296.52 44.8406 295.211 cv
46.2423 296.015 47.9045 296.446 49.578 296.311 cv
49.1471 294.361 47.3183 292.938 45.7987 291.469 cv
44.1649 289.89 42.8067 288.069 41.8075 286.117 cv
41.3602 284.981 40.9065 283.486 40.4858 281.452 cv
40.4276 280.758 li
43.508 290.717 57.2315 296.245 63.8364 285.538 cv
59.6252 288.178 56.1474 287.705 53.3127 287.022 cv
56.5599 286.611 59.5045 285.578 60.3227 282.921 cv
59.3471 283.918 57.7454 284.382 56.1947 284.432 cv
54.6441 284.482 53.1137 284.169 51.6081 283.858 cv
49.6158 283.447 47.456 282.483 46.0063 280.758 cv
54.7595 280.758 li
54.7595 276.124 li
44.5058 276.124 li
45.2482 260.438 64.9623 257.75 64.9599 267.478 cv
64.9585 274.027 54.8721 275.215 53.6481 270.09 cv
53.6378 270.047 53.5669 270.106 53.5747 270.15 cv
54.1042 273.114 53.5173 274.089 55.8055 276.216 cv
59.019 279.825 67.2467 279.461 69.0265 275.471 cv
69.0265 274.841 70.552 273.581 69.7892 272.321 cv
70.552 272.951 71.7649 273.51 72.8403 273.581 cv
76.1454 273.801 79.4508 266.364 70.5522 263.634 cv
cp
f
49.3779 255.708 mo
51.1553 254.686 52.8943 253.591 54.3923 252.297 cv
57.0124 250.844 59.697 249.425 61.8269 247.484 cv
65.8276 243.837 67.5348 238.666 68.7383 233.657 cv
67.3463 236.745 62.9942 237.524 59.9248 239.388 cv
57.8122 240.671 56.2057 242.615 55.4482 244.805 cv
55.6281 241.935 56.6532 239.11 58.3909 236.698 cv
55.024 239.623 53.4359 243.642 51.8749 247.695 cv
49.8346 251.949 47.4988 256.088 44.8536 260.064 cv
46.3617 258.612 47.8698 257.16 49.3779 255.708 cv
cp
f
114.819 138.8 mo
118.526 136.276 123.873 135.923 128.01 136.987 cv
132.761 138.819 139.214 143.512 141.589 150.872 cv
140.964 145.44 138.839 135.637 136.464 131.38 cv
133.696 126.419 131.339 131.38 131.339 131.38 cv
124.964 118.911 116.964 125.624 120.653 130.359 cv
117.714 129.449 120.232 131.047 118.096 132.709 cv
114.605 135.424 120.047 134.531 120.047 134.531 cv
118.118 134.815 115.9 137.649 114.819 138.8 cv
cp
f
177.628 140.812 mo
173.92 138.288 169.649 137.552 164.436 138.867 cv
159.685 140.7 155.115 145.236 152.503 149.259 cv
150.676 152.839 148.634 157.615 147.871 162.507 cv
149.466 143.304 154.501 120.948 161.357 125.062 cv
162.857 125.962 153.751 116.18 146.223 109.955 cv
138.695 116.18 129.589 125.962 131.089 125.062 cv
137.945 120.948 142.981 143.304 144.575 162.507 cv
143.812 157.615 141.77 152.839 139.943 149.259 cv
137.331 145.236 132.761 140.7 128.01 138.867 cv
122.797 137.552 118.526 138.288 114.819 140.812 cv
105.214 148.912 113.131 160.986 123.227 158.123 cv
128.821 156.537 132.714 151.606 136.751 158.674 cv
132.977 139.671 119.286 152.228 117.464 148.312 cv
115.964 145.087 120.938 142.907 125.896 144.394 cv
131.896 146.194 140.964 152.962 141.589 162.524 cv
141.639 162.546 137.374 160.43 137.339 160.499 cv
133.797 167.511 126.089 163.338 126.089 163.338 cv
126.089 163.338 134.339 171.299 141.589 167.024 cv
141.959 176.438 127.248 175.106 126.089 169.049 cv
124.589 177.937 133.739 182.386 139.753 176.952 cv
141.762 175.138 144.006 172.364 144.309 168.552 cv
144.347 168.085 144.363 167.613 144.37 167.141 cv
144.649 167.141 li
144.651 169.078 143.998 173.98 141.659 176.829 cv
139.089 179.962 132.668 182.106 135.464 185.812 cv
140.839 182.662 144.964 189.35 146.223 191.79 cv
147.482 189.35 151.607 182.662 156.982 185.812 cv
159.779 182.106 153.357 179.962 150.787 176.829 cv
148.449 173.98 147.796 169.078 147.797 167.141 cv
148.077 167.141 li
148.084 167.613 148.1 168.085 148.137 168.552 cv
148.44 172.364 150.684 175.138 152.693 176.952 cv
158.707 182.386 167.857 177.937 166.357 169.049 cv
165.198 175.106 150.487 176.438 150.857 167.024 cv
158.107 171.299 166.357 163.338 166.357 163.338 cv
166.357 163.338 158.649 167.511 155.107 160.499 cv
155.073 160.43 150.807 162.546 150.857 162.524 cv
151.482 152.962 160.55 146.194 166.55 144.394 cv
171.508 142.907 176.482 145.087 174.982 148.312 cv
173.161 152.228 159.469 139.671 155.695 158.674 cv
159.732 151.606 163.625 156.537 169.22 158.123 cv
179.316 160.986 187.232 148.912 177.628 140.812 cv
cp
f
155.982 131.38 mo
153.607 135.637 151.482 145.44 150.857 150.872 cv
153.232 143.512 159.685 138.819 164.436 136.987 cv
168.574 135.923 173.92 136.276 177.628 138.8 cv
176.547 137.649 174.328 134.815 172.399 134.531 cv
172.399 134.531 177.841 135.424 174.351 132.709 cv
172.214 131.047 174.732 129.449 171.793 130.359 cv
175.482 125.624 167.482 118.911 161.107 131.38 cv
161.107 131.38 158.75 126.419 155.982 131.38 cv
cp
f
164.731 53.6411 mo
189.897 44.9256 177.147 14.6786 177.147 14.6786 cv
177.147 14.6786 174.772 16.0286 171.515 19.0203 cv
163.101 28.1411 167.897 36.2411 159.897 44.4911 cv
163.101 38.0411 166.836 26.9092 163.101 21.2411 cv
159.564 25.8911 159.356 29.7153 158.621 31.5153 cv
156.376 37.0107 160.51 48.1103 149.717 53.3355 cv
149.925 52.3439 150.456 51.3638 151.126 50.5482 cv
152.374 49.0278 154.044 47.79 155.086 46.1484 cv
157.517 42.3174 155.937 37.4755 156.842 33.1396 cv
153.837 36.4295 150.705 39.9831 150.211 44.2186 cv
150.042 45.669 150.196 47.1381 150.029 48.5886 cv
149.915 49.5829 149.644 50.5606 149.237 51.4907 cv
147.005 34.5026 157.272 29.1911 157.272 29.1911 cv
160.106 17.3761 148.564 12.0911 146.223 1.66066 cv
143.882 12.0911 132.34 17.3761 135.174 29.1911 cv
135.174 29.1911 145.441 34.5026 143.209 51.4907 cv
142.802 50.5606 142.531 49.5829 142.417 48.5886 cv
142.25 47.1381 142.404 45.669 142.235 44.2186 cv
141.742 39.9831 138.609 36.4295 135.604 33.1396 cv
136.51 37.4755 134.929 42.3174 137.36 46.1484 cv
138.402 47.79 140.072 49.0278 141.321 50.5482 cv
141.99 51.3638 142.521 52.3439 142.73 53.3355 cv
131.937 48.1103 136.071 37.0107 133.825 31.5153 cv
133.09 29.7153 132.882 25.8911 129.345 21.2411 cv
125.61 26.9092 129.345 38.0411 132.549 44.4911 cv
124.549 36.2411 129.345 28.1411 120.931 19.0203 cv
117.674 16.0286 115.299 14.6786 115.299 14.6786 cv
115.299 14.6786 102.549 44.9256 127.716 53.6411 cv
116.716 48.3911 116.299 34.3661 120.716 31.5911 cv
120.299 39.9872 128.694 43.91 133.66 50.6122 cv
133.632 50.6113 li
132.751 49.6769 131.762 48.8849 130.477 48.458 cv
129.902 48.267 129.295 48.1618 128.726 47.9579 cv
127.413 47.4873 126.381 46.5135 125.668 45.4148 cv
126.052 48.1718 128.145 50.6847 130.977 51.7904 cv
132.371 52.3348 133.898 52.5512 135.315 53.0473 cv
135.478 53.1045 135.64 53.1681 135.801 53.2355 cv
135.853 53.3001 135.907 53.3637 135.959 53.4279 cv
130.846 53.4279 li
130.846 57.8478 li
137.427 57.3935 li
137.281 57.5588 137.112 57.7084 136.922 57.8348 cv
134.651 59.3472 131.284 59.2691 129.371 61.1396 cv
128.6 61.8931 128.162 62.886 127.378 63.6285 cv
129.109 64.2842 131.181 64.1586 132.798 63.3 cv
134.1 62.6094 135.061 61.5129 135.991 60.4417 cv
136.552 59.7954 137.124 59.1214 137.568 58.404 cv
137.298 62.7844 132.185 67.5618 127.425 65.931 cv
126.716 73.1411 140.434 79.7522 138.382 78.0911 cv
128.442 70.0418 143.884 62.6987 144.598 57.8478 cv
144.722 61.3097 139.904 67.7531 139.904 70.4583 cv
139.903 74.3712 142.696 77.8389 146.223 80.3905 cv
149.75 77.8389 152.543 74.3712 152.543 70.4583 cv
152.543 67.7531 147.724 61.3097 147.848 57.8478 cv
148.562 62.6987 164.004 70.0418 154.064 78.0911 cv
152.013 79.7522 165.731 73.1411 165.022 65.931 cv
160.261 67.5618 155.148 62.7844 154.878 58.404 cv
155.322 59.1214 155.894 59.7954 156.455 60.4417 cv
157.385 61.5129 158.347 62.6094 159.648 63.3 cv
161.265 64.1586 163.337 64.2842 165.068 63.6285 cv
164.284 62.886 163.846 61.8931 163.076 61.1396 cv
161.162 59.2691 157.795 59.3472 155.524 57.8348 cv
155.335 57.7084 155.165 57.5588 155.019 57.3935 cv
161.6 57.8478 li
161.6 53.4279 li
156.487 53.4279 li
156.54 53.3637 156.593 53.3001 156.645 53.2355 cv
156.806 53.1681 156.968 53.1045 157.132 53.0473 cv
158.548 52.5512 160.075 52.3348 161.469 51.7904 cv
164.302 50.6847 166.394 48.1718 166.778 45.4148 cv
166.065 46.5135 165.034 47.4873 163.72 47.9579 cv
163.151 48.1618 162.544 48.267 161.969 48.458 cv
160.684 48.8849 159.695 49.6769 158.814 50.6113 cv
158.786 50.6122 li
163.752 43.91 172.147 39.9872 171.731 31.5911 cv
176.147 34.3661 175.731 48.3911 164.731 53.6411 cv
cp
f
127.902 245.421 mo
127.872 245.588 127.833 245.753 127.804 245.92 cv
131.238 247.827 133.686 250.847 136.03 253.806 cv
136.077 253.544 li
132.16 244.83 133.749 234.299 140.104 226.84 cv
139.889 226.976 140.844 225.58 141.613 224.8 cv
137.475 226.965 128.891 240.86 127.883 245.414 cv
127.902 245.421 li
cp
f
134.494 290.494 mo
134.564 290.455 134.634 290.416 134.704 290.376 cv
134.73 290.307 134.752 290.236 134.784 290.167 cv
134.494 290.494 li
cp
f
139.846 285.786 mo
138.132 286.751 136.418 287.715 134.704 288.679 cv
134.301 289.733 134.417 290.898 134.548 292.014 cv
134.722 293.505 134.897 294.995 135.071 296.486 cv
136.075 295.377 137.215 294.367 138.463 293.481 cv
138.947 293.137 139.468 292.789 139.717 292.282 cv
139.917 291.874 139.914 291.413 139.909 290.967 cv
139.888 289.24 139.867 287.513 139.846 285.786 cv
cp
f
164.267 270.932 mo
164.157 271.233 li
166.661 271.045 173.066 267.118 174.08 266.417 cv
178.204 263.565 179.092 259.407 179.092 255.486 cv
179.092 248.846 169.756 241.89 161.15 250.021 cv
161.148 250.023 161.147 250.024 161.145 250.026 cv
160.165 250.859 159.332 251.805 158.553 252.846 cv
156.756 255.063 155.26 257.511 154.05 259.995 cv
151.659 264.594 150.107 269.022 149.614 272.627 cv
149.614 272.627 li
146.223 264.421 157.154 250.844 157.154 244.963 cv
157.154 235.51 152.259 227.171 146.223 221.193 cv
140.187 227.171 135.292 235.51 135.292 244.963 cv
135.292 250.844 146.223 264.138 142.832 272.627 cv
142.832 272.627 li
142.34 269.022 140.788 264.594 138.396 259.995 cv
137.187 257.511 135.69 255.063 133.893 252.846 cv
133.114 251.805 132.281 250.859 131.301 250.026 cv
131.3 250.024 131.298 250.023 131.297 250.021 cv
122.69 241.89 113.354 248.846 113.354 255.486 cv
113.354 259.407 114.242 263.565 118.366 266.417 cv
119.38 267.118 125.786 271.045 128.289 271.233 cv
128.179 270.932 li
126.824 269.004 126.117 267.864 125.908 266.099 cv
125.77 264.931 126.101 263.477 127.344 263.118 cv
128.215 262.866 133.871 262.769 136.084 272.627 cv
131.459 272.627 li
131.459 276.995 li
138.126 276.995 li
137.411 280.835 134.761 285.906 129.736 287.768 cv
132.416 287.873 135.171 287.533 137.549 286.415 cv
138.991 285.737 140.274 284.744 141.196 283.545 cv
141.178 283.994 141.162 284.445 141.161 284.922 cv
141.149 290.775 142.508 295.463 145.143 298.956 cv
145.436 299.394 145.737 299.759 146.043 300.043 cv
146.103 300.11 146.162 300.179 146.223 300.246 cv
146.284 300.179 146.343 300.11 146.403 300.043 cv
146.71 299.759 147.01 299.394 147.303 298.956 cv
149.939 295.463 151.298 290.775 151.286 284.922 cv
151.285 284.445 151.269 283.994 151.251 283.545 cv
152.173 284.744 153.456 285.737 154.898 286.415 cv
157.276 287.533 160.03 287.873 162.711 287.768 cv
157.686 285.906 155.035 280.835 154.32 276.995 cv
160.987 276.995 li
160.987 272.627 li
156.363 272.627 li
158.575 262.769 164.232 262.866 165.102 263.118 cv
166.345 263.477 166.676 264.931 166.538 266.099 cv
166.33 267.864 165.622 269.004 164.267 270.932 cv
cp
f
152.343 226.84 mo
158.698 234.299 160.286 244.83 156.369 253.544 cv
156.416 253.806 li
158.76 250.847 161.208 247.827 164.642 245.92 cv
164.614 245.753 164.574 245.588 164.544 245.421 cv
164.564 245.414 li
163.209 239.04 154.972 226.965 150.833 224.8 cv
151.603 225.58 152.558 226.976 152.343 226.84 cv
cp
f
157.663 290.167 mo
157.694 290.236 157.716 290.307 157.743 290.376 cv
157.812 290.416 157.882 290.455 157.952 290.494 cv
157.663 290.167 li
cp
f
152.6 285.786 mo
152.579 287.513 152.558 289.24 152.537 290.967 cv
152.532 291.413 152.53 291.874 152.729 292.282 cv
152.978 292.789 153.499 293.137 153.983 293.481 cv
155.231 294.367 156.371 295.377 157.375 296.486 cv
157.549 294.995 157.724 293.505 157.899 292.014 cv
158.029 290.898 158.145 289.733 157.743 288.679 cv
156.029 287.715 154.315 286.751 152.6 285.786 cv
cp
f
131.193 353.502 mo
130.041 346.222 126.386 339.454 122.22 333.128 cv
122.513 336.018 122.805 338.909 123.097 341.799 cv
126.474 345.273 129.224 349.24 131.193 353.502 cv
cp
f
123.127 342.094 mo
123.117 341.996 123.107 341.897 123.097 341.799 cv
123.018 341.717 122.942 341.632 122.862 341.551 cv
123.127 342.094 li
cp
f
158.242 382.652 mo
158.076 382.77 157.9 382.874 157.718 382.969 cv
155.554 382.969 li
156.514 377.928 160.127 372.735 167.591 370.108 cv
172.702 368.309 169.026 375.662 169.026 375.662 cv
178.011 372.279 180.597 366.246 180.641 360.478 cv
180.408 360.417 180.172 360.359 179.932 360.305 cv
170.932 357.605 163.932 363.905 158.932 369.305 cv
163.05 360.657 170.937 356.673 180.006 355.024 cv
171.432 351.08 176.535 337.805 176.535 337.805 cv
176.535 337.805 165.389 345.605 158.621 361.056 cv
156.221 366.534 151.29 377.596 149.535 382.969 cv
150.271 374.588 157.534 360.927 157.534 354.976 cv
157.534 345.553 152.494 337.23 146.223 331.201 cv
139.953 337.23 134.912 345.553 134.912 354.976 cv
134.912 360.927 142.175 374.588 142.911 382.969 cv
141.157 377.596 136.225 366.534 133.825 361.056 cv
127.057 345.605 115.912 337.805 115.912 337.805 cv
115.912 337.805 121.015 351.08 112.441 355.024 cv
121.51 356.673 129.397 360.657 133.515 369.305 cv
128.515 363.905 121.515 357.605 112.515 360.305 cv
112.274 360.359 112.038 360.417 111.806 360.478 cv
111.849 366.246 114.436 372.279 123.42 375.662 cv
123.42 375.662 119.745 368.309 124.856 370.108 cv
132.32 372.735 135.932 377.928 136.892 382.969 cv
134.728 382.969 li
134.546 382.874 134.37 382.77 134.205 382.652 cv
133.008 381.802 132.327 380.398 132.446 379.03 cv
126.497 379.968 120.711 381.742 115.363 384.269 cv
116.389 384.723 117.422 385.164 118.455 385.605 cv
120.599 386.658 122.828 387.566 125.121 388.324 cv
127.317 389.182 129.524 390.017 131.749 390.811 cv
132.154 390.956 132.697 391.069 132.961 390.756 cv
133.158 390.521 133.062 390.192 133.039 389.898 cv
132.951 388.818 134.016 387.884 135.18 387.608 cv
135.792 387.463 136.422 387.458 137.054 387.515 cv
136.383 393.06 132.518 397.217 127.425 395.472 cv
127.875 399.539 140.085 405.521 138.44 403.527 cv
133.23 397.212 141.485 391.042 143.856 387.388 cv
144.598 387.388 li
144.722 390.85 139.903 397.294 139.903 399.999 cv
139.903 403.912 142.696 407.38 146.223 409.931 cv
149.75 407.38 152.543 403.912 152.543 399.999 cv
152.543 397.294 147.724 390.85 147.848 387.388 cv
148.59 387.388 li
150.961 391.042 159.216 397.212 154.006 403.527 cv
152.361 405.521 164.571 399.539 165.022 395.472 cv
159.928 397.217 156.063 393.06 155.393 387.515 cv
156.024 387.458 156.655 387.463 157.267 387.608 cv
158.43 387.884 159.496 388.818 159.408 389.898 cv
159.384 390.192 159.288 390.521 159.486 390.756 cv
159.749 391.069 160.292 390.956 160.698 390.811 cv
162.923 390.017 165.129 389.182 167.325 388.324 cv
169.618 387.566 171.848 386.658 173.992 385.605 cv
175.025 385.164 176.057 384.723 177.083 384.269 cv
171.735 381.742 165.949 379.968 160 379.03 cv
160.12 380.398 159.438 381.802 158.242 382.652 cv
cp
f
170.226 333.128 mo
166.06 339.454 162.406 346.222 161.253 353.502 cv
163.223 349.24 165.972 345.273 169.349 341.799 cv
169.641 338.909 169.934 336.018 170.226 333.128 cv
cp
f
169.584 341.551 mo
169.504 341.632 169.429 341.717 169.349 341.799 cv
169.339 341.897 169.329 341.996 169.319 342.094 cv
169.584 341.551 li
cp
f
224.044 36.9869 mo
234.841 26.0386 245.133 35.1278 247.868 40.8531 cv
247.893 40.905 247.989 40.8504 247.97 40.7967 cv
245.036 32.4845 235.412 25.9545 244.412 11.667 cv
234.037 17.517 233.861 23.4948 236.912 28.5795 cv
228.662 25.4295 217.578 31.4294 216.393 38.0919 cv
214.81 46.9953 220.803 51.7971 226.037 52.9545 cv
220.99 50.0602 219.037 42.0639 224.044 36.9869 cv
cp
f
289.386 38.0919 mo
288.201 31.4294 277.118 25.4295 268.868 28.5795 cv
271.919 23.4948 271.743 17.517 261.368 11.667 cv
270.368 25.9545 260.743 32.4845 257.81 40.7967 cv
257.791 40.8504 257.887 40.905 257.912 40.8531 cv
260.646 35.1278 270.939 26.0386 281.736 36.9869 cv
286.743 42.0639 284.79 50.0602 279.743 52.9545 cv
284.977 51.7971 290.97 46.9953 289.386 38.0919 cv
cp
f
279.944 37.6029 mo
274.479 32.5981 268.682 32.6692 262.925 36.4687 cv
261.341 37.8939 260.082 39.3239 259.063 40.8607 cv
256.243 45.642 255.111 49.2995 254.768 53.7871 cv
254.768 51.4196 li
254.768 54.3371 254.791 50.9992 254.806 50.7888 cv
254.876 40.1501 262.484 30.6496 262.993 23.817 cv
263.587 15.8557 258.939 6.27884 252.89 0 cv
246.84 6.27884 242.193 15.8557 242.787 23.817 cv
243.296 30.6496 250.904 40.1501 250.974 50.7888 cv
250.988 50.9992 251.011 54.3371 251.011 51.4196 cv
251.011 53.7871 li
250.668 49.2995 249.537 45.642 246.717 40.8607 cv
245.698 39.3239 244.438 37.8939 242.855 36.4687 cv
237.097 32.6692 231.301 32.5981 225.836 37.6029 cv
222.28 41.6025 222.12 50.4195 228.412 52.9545 cv
232.287 54.4663 235.677 54.3933 237.287 54.4663 cv
233.537 54.2963 226.662 45.9795 230.787 42.0639 cv
241.121 32.254 255.412 52.9545 238.912 52.9545 cv
240.073 59.5462 229.787 55.6545 229.787 55.6545 cv
229.787 55.6545 235.274 63.4857 240.073 59.5462 cv
238.797 60.8254 238.181 63.9026 242.287 64.317 cv
241.662 65.892 233.063 65.8821 233.037 61.617 cv
229.787 69.267 238.65 71.3876 243.412 69.492 cv
249.912 66.9045 250.662 57.117 250.662 57.117 cv
250.662 57.117 251.845 65.5244 244.242 71.1494 cv
241.917 72.869 240.787 76.3545 242.787 79.617 cv
243.662 76.017 245.537 79.2795 247.66 75.6039 cv
247.973 79.842 251.617 80.803 252.73 82.0204 cv
252.785 82.0812 252.89 82.0459 252.89 81.9672 cv
252.89 82.0459 252.995 82.0812 253.05 82.0204 cv
254.162 80.803 257.807 79.842 258.12 75.6039 cv
260.243 79.2795 262.118 76.017 262.993 79.617 cv
264.993 76.3545 263.862 72.869 261.538 71.1494 cv
253.935 65.5244 255.118 57.117 255.118 57.117 cv
255.118 57.117 255.868 66.9045 262.368 69.492 cv
267.13 71.3876 275.993 69.267 272.743 61.617 cv
272.717 65.8821 264.118 65.892 263.493 64.317 cv
267.598 63.9026 266.982 60.8254 265.707 59.5462 cv
270.506 63.4857 275.993 55.6545 275.993 55.6545 cv
275.993 55.6545 265.707 59.5462 266.868 52.9545 cv
250.368 52.9545 264.658 32.254 274.993 42.0639 cv
279.118 45.9795 272.243 54.2963 268.493 54.4663 cv
270.102 54.3933 273.493 54.4663 277.368 52.9545 cv
283.659 50.4195 283.499 41.6025 279.944 37.6029 cv
cp
f
57.3224 161.247 mo
75.9032 163.612 80.2437 143.019 69.1229 140.961 cv
62.039 139.651 56.639 141.577 52.5939 144.793 cv
54.6493 141.979 57.8384 139.69 61.5588 138.388 cv
61.563 138.387 61.5682 138.386 61.5725 138.385 cv
61.5756 138.385 61.5765 138.382 61.5796 138.381 cv
62.7803 137.963 64.0349 137.644 65.3253 137.447 cv
64.4442 130.691 65.6362 123.766 68.7662 117.456 cv
68.053 118.417 67.324 119.39 66.5658 120.35 cv
65.5977 121.521 64.5615 122.727 63.4728 123.928 cv
61.1255 126.357 58.4025 128.466 55.0029 129.795 cv
54.7859 129.788 54.5686 129.782 54.3533 129.755 cv
54.3395 139.087 46.3503 147.581 44.1687 156.521 cv
42.8679 159.636 42.2441 162.322 42.1384 163.556 cv
41.66 163.556 li
41.66 161.189 li
41.66 164.106 41.6858 160.769 41.7019 160.558 cv
41.7805 149.919 51.6962 139.483 51.6962 134.21 cv
51.6963 124.58 46.331 116.048 39.5565 109.769 cv
32.782 116.048 27.4167 124.58 27.4168 134.21 cv
27.4168 139.483 37.3325 149.919 37.4111 160.558 cv
37.4272 160.769 37.453 164.106 37.453 161.189 cv
37.453 163.556 li
36.9746 163.556 li
36.8689 162.322 36.2451 159.636 34.9443 156.521 cv
32.7627 147.581 24.7735 139.087 24.7597 129.755 cv
24.5444 129.782 24.3271 129.788 24.1101 129.795 cv
20.7105 128.466 17.9875 126.357 15.6402 123.928 cv
14.5514 122.727 13.5153 121.521 12.5471 120.35 cv
11.789 119.39 11.06 118.417 10.3468 117.456 cv
13.4768 123.766 14.6688 130.691 13.7877 137.447 cv
15.0781 137.644 16.3327 137.963 17.5334 138.381 cv
17.5365 138.382 17.5374 138.385 17.5405 138.385 cv
17.5448 138.386 17.5499 138.387 17.5542 138.388 cv
21.2746 139.69 24.4637 141.979 26.5191 144.793 cv
22.474 141.577 17.074 139.651 9.99009 140.961 cv
-1.13065 143.019 3.20976 163.612 21.7906 161.247 cv
21.7906 161.247 6.00926 158.432 12.9763 150.872 cv
20.3129 142.912 38.2529 162.529 24.7998 163.556 cv
11.2965 163.762 li
11.2965 163.762 22.8745 172.21 21.7331 170.661 cv
17.6423 165.112 27.3477 165.112 28.9621 169.704 cv
29.1277 170.175 29.3721 170.629 29.3825 171.118 cv
29.4157 172.685 28.1878 174.183 26.4738 174.93 cv
24.7599 175.677 22.642 175.714 20.8021 175.195 cv
19.4257 174.806 18.1548 174.096 17.4063 173.09 cv
16.6578 172.083 16.4975 170.766 17.18 169.73 cv
15.052 172.039 15.7974 175.293 17.039 177.988 cv
17.6598 179.335 18.3891 180.702 18.8918 182.086 cv
19.2567 184.408 19.2376 186.767 18.8327 189.085 cv
19.2149 187.693 20.3908 186.465 21.7599 185.527 cv
23.3578 184.432 25.2047 183.601 26.9208 182.629 cv
36.6553 177.112 37.0762 167.719 37.4263 166.462 cv
37.4517 166.37 38.3595 170.512 36.715 174.678 cv
35.3692 176.531 33.6925 178.234 32.2454 180.045 cv
30.424 182.323 28.9315 184.936 29.1864 187.637 cv
30.4091 186.596 32.2801 186.237 33.7 185.373 cv
33.9422 185.226 34.1591 185.057 34.3722 184.886 cv
35.4221 188.051 38.5036 190.803 39.5565 191.976 cv
40.6094 190.803 43.6909 188.051 44.7408 184.886 cv
44.9539 185.057 45.1708 185.226 45.413 185.373 cv
46.8329 186.237 48.7039 186.596 49.9266 187.637 cv
50.1815 184.936 48.689 182.323 46.8676 180.045 cv
45.4205 178.234 43.7438 176.531 42.398 174.678 cv
40.7535 170.512 41.6613 166.37 41.6867 166.462 cv
42.0368 167.719 42.4577 177.112 52.1922 182.629 cv
53.9083 183.601 55.7552 184.432 57.3531 185.527 cv
58.7222 186.465 59.8981 187.693 60.2803 189.085 cv
59.8754 186.767 59.8563 184.408 60.2212 182.086 cv
60.7239 180.702 61.4532 179.335 62.074 177.988 cv
63.3156 175.293 64.061 172.039 61.933 169.73 cv
62.6155 170.766 62.4552 172.083 61.7067 173.09 cv
60.9582 174.096 59.6873 174.806 58.3109 175.195 cv
56.471 175.714 54.3531 175.677 52.6392 174.93 cv
50.9252 174.183 49.6973 172.685 49.7305 171.118 cv
49.7409 170.629 49.9853 170.175 50.1509 169.704 cv
51.7653 165.112 61.4707 165.112 57.3799 170.661 cv
56.2385 172.21 67.8165 163.762 67.8165 163.762 cv
54.3132 163.556 li
40.8601 162.529 58.8001 142.912 66.1367 150.872 cv
73.1037 158.432 57.3224 161.247 57.3224 161.247 cv
cp
f
234.288 265.994 mo
235.091 265.354 236.296 265.632 237.17 266.172 cv
238.227 266.825 239.071 267.817 239.546 268.965 cv
239.014 267.18 238.157 265.494 237.029 264.013 cv
236.236 262.972 235.216 261.98 233.925 261.77 cv
233.822 261.753 233.717 261.756 233.612 261.753 cv
232.671 261.462 231.593 261.532 230.814 262.125 cv
229.859 262.852 229.552 264.204 229.781 265.382 cv
229.925 266.123 230.255 266.804 230.65 267.451 cv
230.8 267.929 230.997 268.393 231.264 268.819 cv
232.511 270.808 234.969 271.964 237.296 271.657 cv
235.679 271.392 234.258 270.162 233.764 268.599 cv
233.479 267.7 233.55 266.581 234.288 265.994 cv
cp
f
232.225 288.551 mo
233.671 289.435 235.579 289.375 237.095 288.618 cv
238.505 287.913 239.588 286.67 240.312 285.265 cv
240.904 283.677 241.158 281.962 240.998 280.274 cv
240.167 281.822 239.007 283.264 237.429 284.036 cv
235.85 284.808 233.801 284.779 232.465 283.638 cv
231.129 282.496 230.879 280.164 232.185 278.988 cv
230.931 279.995 229.582 281.163 229.382 282.759 cv
229.29 283.489 229.458 284.227 229.687 284.926 cv
230.155 286.358 230.939 287.765 232.225 288.551 cv
cp
f
240.475 284.945 mo
240.424 285.054 240.366 285.159 240.312 285.265 cv
240.222 285.505 240.147 285.75 240.041 285.983 cv
240.475 284.945 li
cp
f
286.527 245.48 mo
281.447 245.48 268.24 249.476 262.853 257.296 cv
258.406 263.752 256.815 269.304 256.606 274.15 cv
254.048 253.76 285.232 245.552 274.878 233.255 cv
278.143 239.635 269.777 246.377 261.947 251.774 cv
258.432 254.197 256.656 255.887 255.868 261.587 cv
255.868 250.874 263.708 246.161 266.233 245.102 cv
266.233 236.132 258.408 228.286 252.89 221.51 cv
247.371 228.286 239.546 236.132 239.546 245.102 cv
242.071 246.161 249.912 250.874 249.912 261.587 cv
249.124 255.887 247.347 254.197 243.833 251.774 cv
236.002 246.377 227.637 239.635 230.902 233.255 cv
220.548 245.552 251.731 253.76 249.174 274.15 cv
248.964 269.304 247.374 263.752 242.926 257.296 cv
237.539 249.476 224.333 245.48 219.253 245.48 cv
221.205 248.955 220.263 254.54 220.162 260.545 cv
219.97 271.929 231.11 278.506 237.018 273.304 cv
230.395 274.93 225.166 262.269 231.284 260.598 cv
236.953 259.049 241.602 265.548 242.954 274.288 cv
242.72 274.288 li
240.665 274.194 238.648 273.243 237.33 271.658 cv
237.4 271.766 237.46 271.877 237.522 271.988 cv
238.239 275.227 237.762 278.716 236.198 281.642 cv
238.034 280.345 240.141 279.44 242.341 278.979 cv
243.096 278.979 li
242.529 292.796 234.228 292.131 230.707 289.95 cv
232.288 292.097 234.262 294.196 237.163 294.596 cv
239.952 294.98 242.576 293.407 244.357 291.606 cv
247.072 288.861 248.931 283.311 249.309 278.979 cv
250.118 278.979 li
249.563 284.072 248.718 288.887 248.169 293.17 cv
247.783 296.174 250.902 298.629 252.89 299.929 cv
254.877 298.629 257.996 296.174 257.611 293.17 cv
257.061 288.887 256.216 284.072 255.662 278.979 cv
256.471 278.979 li
256.849 283.311 258.708 288.861 261.423 291.606 cv
263.203 293.407 265.828 294.98 268.616 294.596 cv
271.518 294.196 273.492 292.097 275.072 289.95 cv
271.552 292.131 263.25 292.796 262.684 278.979 cv
263.438 278.979 li
265.638 279.44 267.745 280.345 269.581 281.642 cv
268.018 278.716 267.54 275.227 268.258 271.988 cv
268.319 271.877 268.38 271.766 268.45 271.658 cv
267.132 273.243 265.115 274.194 263.06 274.288 cv
262.826 274.288 li
264.178 265.548 268.826 259.049 274.496 260.598 cv
280.614 262.269 275.384 274.93 268.762 273.304 cv
274.67 278.506 285.81 271.929 285.618 260.545 cv
285.516 254.54 284.575 248.955 286.527 245.48 cv
cp
f
268.483 271.657 mo
270.811 271.964 273.268 270.808 274.516 268.819 cv
274.783 268.393 274.98 267.929 275.13 267.451 cv
275.525 266.804 275.854 266.123 275.998 265.382 cv
276.228 264.204 275.921 262.852 274.965 262.125 cv
274.186 261.532 273.109 261.462 272.168 261.753 cv
272.063 261.756 271.958 261.753 271.855 261.77 cv
270.563 261.98 269.543 262.972 268.751 264.013 cv
267.622 265.494 266.765 267.18 266.233 268.965 cv
266.709 267.817 267.553 266.825 268.61 266.172 cv
269.483 265.632 270.688 265.354 271.492 265.994 cv
272.229 266.581 272.3 267.7 272.016 268.599 cv
271.522 270.162 270.101 271.392 268.483 271.657 cv
cp
f
273.595 278.988 mo
274.901 280.164 274.65 282.496 273.314 283.638 cv
271.978 284.779 269.929 284.808 268.351 284.036 cv
266.772 283.264 265.613 281.822 264.781 280.274 cv
264.622 281.962 264.875 283.677 265.468 285.265 cv
266.191 286.67 267.275 287.913 268.685 288.618 cv
270.201 289.375 272.108 289.435 273.555 288.551 cv
274.84 287.765 275.625 286.358 276.093 284.926 cv
276.321 284.227 276.489 283.489 276.398 282.759 cv
276.198 281.163 274.849 279.995 273.595 278.988 cv
cp
f
265.739 285.983 mo
265.633 285.75 265.558 285.505 265.468 285.265 cv
265.413 285.159 265.356 285.054 265.305 284.945 cv
265.739 285.983 li
cp
f
225.688 354.336 mo
237.129 357.384 246.177 366.733 247.962 377.351 cv
248.659 373.222 246.989 369.022 244.882 365.277 cv
242.696 361.388 239.995 357.672 238.729 353.465 cv
237.464 349.258 237.94 344.274 241.423 341.246 cv
234.224 342.53 232.788 352.664 225.688 354.336 cv
cp
f
247.962 377.353 mo
247.962 377.352 247.962 377.352 247.962 377.351 cv
247.935 377.509 247.912 377.666 247.879 377.824 cv
247.962 377.353 li
cp
f
246.123 399.161 mo
245.855 399.298 li
245.405 401.159 244.389 402.907 242.947 404.302 cv
242.79 404.454 242.622 404.612 242.569 404.814 cv
242.497 405.09 242.658 405.365 242.798 405.619 cv
243.301 406.539 243.579 407.558 243.605 408.583 cv
244.626 407.939 245.646 407.296 246.666 406.653 cv
246.922 406.492 247.191 406.316 247.31 406.056 cv
247.428 405.797 247.376 405.503 247.321 405.227 cv
246.922 403.205 246.522 401.183 246.123 399.161 cv
cp
f
232.438 395.113 mo
231.926 394.15 230.509 393.736 229.394 394.1 cv
228.279 394.464 227.514 395.47 227.342 396.526 cv
227.17 397.583 227.528 398.667 228.136 399.584 cv
229.17 401.141 231.088 402.316 233.099 402.185 cv
234.608 402.088 235.955 401.297 237.088 400.395 cv
239.722 398.297 241.661 395.185 241.152 392.053 cv
241.128 392.894 240.92 393.729 240.544 394.499 cv
240.652 393.58 li
239.704 396.174 237.077 398.209 234.086 398.666 cv
232.992 398.833 231.804 398.787 230.863 398.258 cv
229.923 397.729 229.332 396.62 229.737 395.691 cv
230.142 394.761 231.705 394.363 232.438 395.113 cv
cp
f
226.437 351.183 mo
228.851 351.183 230.808 349.421 230.808 347.249 cv
230.808 345.076 228.851 343.315 226.437 343.315 cv
224.023 343.315 222.066 345.076 222.066 347.249 cv
222.066 349.421 224.023 351.183 226.437 351.183 cv
cp
f
232.267 344.702 mo
233.923 344.702 235.265 343.495 235.265 342.005 cv
235.265 340.515 233.923 339.307 232.267 339.307 cv
230.612 339.307 229.27 340.515 229.27 342.005 cv
229.27 343.495 230.612 344.702 232.267 344.702 cv
cp
f
237.525 340.575 mo
238.764 340.575 239.769 339.671 239.769 338.555 cv
239.769 337.439 238.764 336.534 237.525 336.534 cv
236.285 336.534 235.28 337.439 235.28 338.555 cv
235.28 339.671 236.285 340.575 237.525 340.575 cv
cp
f
290.278 367.658 mo
290.28 360.567 282.571 354.769 274.487 359.421 cv
270.25 361.325 266.532 363.979 264.027 367.628 cv
259.95 373.565 258.148 379.935 258.032 385.841 cv
256.64 385.841 li
256.358 383.871 256.193 381.681 256.288 379.167 cv
257.868 360.31 264.325 361.422 264.325 355.557 cv
264.325 346.299 259.271 338.862 253.464 332.774 cv
253.19 332.328 252.997 331.936 252.89 331.702 cv
252.783 331.936 252.59 332.328 252.316 332.774 cv
246.509 338.862 241.454 346.299 241.454 355.557 cv
241.454 361.422 247.912 360.31 249.491 379.167 cv
249.586 381.681 249.422 383.871 249.14 385.841 cv
247.748 385.841 li
247.632 379.935 245.83 373.565 241.753 367.628 cv
239.248 363.979 235.529 361.325 231.293 359.421 cv
223.209 354.769 215.5 360.567 215.502 367.658 cv
215.506 379.839 228.69 384.164 231.346 384.362 cv
227.007 382.044 226.328 377.3 230.343 375.754 cv
232.601 374.885 238.779 376.463 241.369 385.841 cv
237.067 385.841 li
237.067 390.475 li
242.231 390.475 li
242.638 396.873 237.136 408.224 226.816 402.924 cv
228.151 406.934 237.344 408.795 242.071 403.301 cv
244.858 400.062 246.805 395.56 247.487 390.475 cv
248.229 390.475 li
247.527 393.399 246.799 395.839 246.794 398.28 cv
246.784 402.829 250.292 406.897 252.3 408.87 cv
252.3 408.87 252.307 408.877 252.89 409.431 cv
253.472 408.877 253.48 408.87 253.48 408.87 cv
255.488 406.897 258.995 402.829 258.986 398.28 cv
258.981 395.839 258.253 393.399 257.55 390.475 cv
258.293 390.475 li
258.975 395.56 260.922 400.062 263.709 403.301 cv
268.435 408.795 277.629 406.934 278.964 402.924 cv
268.643 408.224 263.142 396.873 263.549 390.475 cv
268.712 390.475 li
268.712 385.841 li
264.411 385.841 li
267 376.463 273.179 374.885 275.437 375.754 cv
279.451 377.3 278.773 382.044 274.434 384.362 cv
277.09 384.164 290.274 379.839 290.278 367.658 cv
cp
f
267.05 353.465 mo
265.785 357.672 263.084 361.388 260.897 365.277 cv
258.791 369.022 257.121 373.222 257.818 377.351 cv
259.603 366.733 268.651 357.384 280.092 354.336 cv
272.992 352.664 271.556 342.53 264.356 341.246 cv
267.839 344.274 268.315 349.258 267.05 353.465 cv
cp
f
257.901 377.824 mo
257.867 377.666 257.845 377.509 257.818 377.351 cv
257.818 377.352 257.818 377.352 257.817 377.353 cv
257.901 377.824 li
cp
f
262.832 404.302 mo
261.391 402.907 260.375 401.159 259.924 399.298 cv
259.657 399.161 li
259.257 401.183 258.858 403.205 258.458 405.227 cv
258.404 405.503 258.351 405.797 258.47 406.056 cv
258.589 406.316 258.858 406.492 259.114 406.653 cv
260.134 407.296 261.154 407.939 262.174 408.583 cv
262.201 407.558 262.478 406.539 262.982 405.619 cv
263.121 405.365 263.282 405.09 263.21 404.814 cv
263.158 404.612 262.989 404.454 262.832 404.302 cv
cp
f
268.692 400.395 mo
269.825 401.297 271.172 402.088 272.681 402.185 cv
274.691 402.316 276.61 401.141 277.643 399.584 cv
278.251 398.667 278.609 397.583 278.438 396.526 cv
278.266 395.47 277.501 394.464 276.386 394.1 cv
275.271 393.736 273.854 394.15 273.342 395.113 cv
274.075 394.363 275.638 394.761 276.043 395.691 cv
276.448 396.62 275.857 397.729 274.916 398.258 cv
273.975 398.787 272.787 398.833 271.694 398.666 cv
268.702 398.209 266.076 396.174 265.128 393.58 cv
265.235 394.499 li
264.86 393.729 264.652 392.894 264.627 392.053 cv
264.118 395.185 266.058 398.297 268.692 400.395 cv
cp
f
274.972 347.249 mo
274.972 349.421 276.929 351.183 279.343 351.183 cv
281.757 351.183 283.714 349.421 283.714 347.249 cv
283.714 345.076 281.757 343.315 279.343 343.315 cv
276.929 343.315 274.972 345.076 274.972 347.249 cv
cp
f
273.512 344.702 mo
275.168 344.702 276.51 343.495 276.51 342.005 cv
276.51 340.515 275.168 339.307 273.512 339.307 cv
271.857 339.307 270.515 340.515 270.515 342.005 cv
270.515 343.495 271.857 344.702 273.512 344.702 cv
cp
f
268.255 340.575 mo
269.495 340.575 270.5 339.671 270.5 338.555 cv
270.5 337.439 269.495 336.534 268.255 336.534 cv
267.015 336.534 266.01 337.439 266.01 338.555 cv
266.01 339.671 267.015 340.575 268.255 340.575 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: ( ) ()
%%Title: (1511.m00.i121.n035.S.c12.227387203 French royal lily flowers.eps)
%%CreationDate: 11/20/2015 11:27 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kq-+NSf)PL-H(OgRiXQ$p\*=,n#m:r25sTE-`K2nf#t`A#N;&,%DuZETWN,COYVgXERtSn1hs8gV>#1^&:7]+CDn4D:f':MT
%jjmf1"ii:?H*1*8*3V&/LVNk4n)![4G2+*O<"tX;dF'XN+nb@F\*-7eJ3Lrn%Qnha\#TDU\CoX%[&S,T]@(H$3o0VKEhcMqU#/N/
%@XkN:Lt>h$dn6h%(G,j&qqU[X[rN2/(\mG-&,+UN$+(B?HF+/##L2_>]__-G*1t#'^Z,J=r?V^Oh\#Jshi:#^^e]OE#DK-Qg[S.S
%gZqgboiC\U1^5G3qf:\e\6Y4]crBT?S,P3458ME3@AVlFaV>Q=<qP##F9+bQ'K4]rFLd`FYdh#6s""*os(-rl5lYKB`rDs]cMe9&
%G7&6(POiU-Pqe%=)u*IM'D/W+3nS'l!+^s'$2j52VsQsM(X'.,6r=Z\jStVId#I:C\D^]N'Rc\ch\3uM0*m@5Bh.rbC7?8hr1b>5
%3F@"P=))_FSTUp\gSt4.cI<M0Ybf.irC5RfgT:,TD/u:?*lP*[/T/one*_"2$6Qpc9E%ktfWB7UiZ8\IX3nsJbSNT=s7X$R\l&8@
%KDo[Ea_!VPm^D!B6K^HY/3#8SO_];t0G=5T6kC)L50`.NeX.0Rh=\Pa%VL]5FL+n1W]0,(m!t0H*22Tj=f5S!aZ"/GU&9Q;:^i?`
%7f'l7WO22%05g'_gWof@.t\G8ii=*D^"TQiZqbTB?2Sc3LqH='d:aQ"?djMoD_sksXZ"(IrRWXd:iBh$hg]u)Igc"[)L_JP=f9eg
%Y;Ztr^]-2lWjN>r_Rm>3CN\i7CPC#cDtK+T_A"e?@CK17dMVWFUeS*lDbj^p+RQKK(Z_dLQiF&b2c"q_;%b5?!"ulsr"1kkD.?u,
%0$f>XNCpP*.I[kiJ/e/'oLjo-PR`P)EUS=Y0o9)fKGGV_gC0$j8H\"N4B$+HRqII`=JaLDZdh(PJ^raP.YdO'\oSMYWlKb0.d5b-
%GcT7S-M7p/CY]+0nt.A&JU7^H1ZD$'dAS.0.dc8B[BSHNGE3-DX]?YarLDc/REXR`-hPWnNF(CSDDpU*cH`F.$r0>+:A,Rafof\)
%bsXdVdjuClX0k!FW!c_tdPa1:<f#lsl3FkUETcNL6*!lOSgL5%O=fI^HF4@Rr9X.:>dA(Ab)8=l8(jLI4=Td-Yk4u/_6G$3Rq*l\
%G5Cl<SFU:XZjj(BY]F&`a,D1tE[Ml*m#ta3p"%pRPo@oUjGuCkSrnQg_*WF3r4Od[s*F][j#*5Hr:b6F$>ZBaq0BqT$\bRp:)cq(
%EK1UWW?:bZ0aY-gC09bC.YDT<a7Vp('0!IU;g>ZEl6Q0;J+S2!g[sNjF`4k\BSV=Y*bCi=W&4@Nc-Hcd1b5K0"\nqoY%CYBn5kW%
%r&),=fN+S<r)p5rNcT#)[2\MX*67`Ij'Ic%k_@"/:5eL8_b7[hDhlR)m!7[E@&EV$G$/#+0/_J(Q$rPpmF>u4G(iDlq,TUm19oI"
%*0BL=XN"?%6M@u')p.#*gX+JTl,;D,,7d<0L;V_?ZaJ8_PBD!?QFbi]JVH:GQt\]?D-"$^eJgTKFQ9c(r4Pm*RR]LOZldl]S?$kb
%m%8/rH^,\`:<[OE;qP?^E;Qqp?S1g.h5c3`Z0of_5Eq@_H%"3i>OAq!+^ZP9_5'e\7;=odI]")KP>692ST`E[1HMWul8$$/]SOP4
%qf%;80C4=6fdk7^0#)'7CjB="J4J_rYcog$j[N\e'3B)$2D]@77amXo-Ec-4VaC)cj)qEZSN(]RDJ%nPrDI8\7lY'RICU?GA`Cm-
%I(>(epYUktM(eVlp#Y>+)rT!&gVg&fF5BX^kAkEOD#?<aFI(r/EF\1A;JZ4k\[p4XP23klTI4fJR,))N*<2sY^2,F*^hc39I2t0@
%(MTnal,!nY$@#V9GJ!N?F8=hONOIZ5moXH/f@9@>h:`FJDOs#PZ$pFT1k/\aLY]Ia#rdetYAa!g`feLaYZ[(4=63L(Ii_t`[q,-T
%cUOMYTP?DB"#%\ig2XOXW,u'Dc#0`5bX6Jb]*rP+<rNQ2rmbmDj(iKcm5!Cm_8tr8*%<GpIcmq5NH_CfI#O>)5-00`:cA1eOjsCr
%TT>NuS[0pE^[Vh7Lg7P/nQ<c#POC4)P@GR3)7kg4eZ(QT)u2f4ZbLAq4%_GJ.(`n=NLh)5-'2=BO1_L*B#s*qG64Of1?7Ng>jmtg
%e0I;U;sta!`k=JNBO`=pDVF2[%fLfrOdg"O!KBQT#)n*qbMc?kjOqJnM!r1)ZNk]]q;S-Q@:g&,nFk5-p\8b.6ok5ujH#aI]hYBt
%3r3KV#Poq<*6#_S=B[f^)=;%-a"L`;,g5ACMV$o]`u+X!=cPY(Gi6fS-V6K<m:P!B56%'A)_8$kA%<8ns2f7$H.2APC3>c']9/55
%S!':Q(N[7OmSmroINBic%>V?\*%*L":MTGsf0:fNI[Rn&lElUL=YPUC1kKVdN>,k9iAGAelR':Mbk!N#,.pD,,Y"?NkAEU1ks:@!
%rV5mV&70)K.L%!T/D(p:0Kp:aNOlndaCCQq$a8IW\,A=IC/!OYk=FM/4)b!dQF"S"nVhaEK'aNo"tR`ZAi">k`!n?jTBH439UB1M
%=t.LgcLppU[`boKG>YAr.F@[`oaa!Rs'K7lN'X2g5n:1=)q-1\B#[9oPj@.KUJd*Aq3P0Jp/n>bdg?PNj6CSG4InUQ2<n'irJ";1
%b[9b]?a&<;s##i\WZ)H8jDr26`^e#XTtoTiP&^')@$_1Vd?\^]c=59l6CufP@p/7FLHdpc>b>L^2a'=c0P?j"@D1(0Q\!X'Bs'Pa
%Zqg5ZK:<<c+.\e$e>mdlWR^;/b[$5LV+l`QWuTpGCZVg'>Jo2_Zdm9@/CeM8[!tZa7-7m9`l$M2V=A3[k=&Ea<j_TNSXcuk[N*ka
%)YI]Iamk7^>%pt+("F:N8t-=8e&ZMu#OtYDo168.RP`*jQ!0dM>I)e`[ZSIb1BiE&r&(\XC>"\c5?,t'd]B)'P%_2:C'?Pi0\['+
%D<A\SOGQlK8XUuP2DZuEMb,8<.)fh?;:_ZRXQh&EASa,!DX]"Uo2PW,]3LR_]JV=AB9J0ncFHVh;>sYob@+G48M80#`bH?C>a4MJ
%b!jFYR;pV4P?a>Lo6"q]/rKT\a@3)bUg0-HRi*"[2t"4)\^"[67D_dD7B,.>>a.@?)&KIU-Z<_=0rHAM=^FI1%.c$j]6IYb%'RcE
%N*iQDnMuD4\r'q!i'u6M/?SB-\\cVj&0_OXL5['SlfY,[=3hQ2q_+uK$rsN<YKG'WY$FQ#q%L:sO_\GLf5f7&7'98FgA:e`LEI7O
%mC0&3LmU`@Od9_qCMb9GXs)=B`nEh\NIb&ufP2)!Q:n6G2a[C/\DJ>bPiP*Ghn>0nWsc]L)dT(qJdECX5f&,5->\p?).=7JNncS(
%l0Va?DarJi=^qE":CD$is,%b"NQTTG+hW(?2-TFdVl^>bIuIV%QCD%L`%K[MN`E:erFm#1^C0[XqVMJQTl>W^E$p?:`hb@][uJfa
%=)VfS$DZ+?[J6u_]_JP@RBpYKQ!QIPD%WQ1YdS_-C;/>Gp+ch@?`l-os+M1p7a3d$=^NTT+#pjLaj86)U%,BZim5*)Iq'DsOGnc1
%G(5a?^.)Cs?2GOVoH.5F:>;m'=eD2^Mr`CFP\7lJ"=neB@jqR2SU0c"2"'HK[BYl!f-@khQO5a)Z6pI-r6.<sd;UC9DQ@j>j][Z]
%lUd[BS;d4a/kXI4m(j]ZhRMcE3O8s/1rRot._^-PPiOf16sT>"-SPEF0E!6l^Q\QPlg?NLs#YnNK;1oZPPa7"^].kbK,\4=>0&.=
%-?m1f45\0#0Ws9^jN_sik<$6G4gU-iSaYXbp\`i@mX0euS]RGkBH>-l1OkFrA_hguOSkrG]HtBMc%i^1>5drpTBGMgA&J=,_OYGj
%/$1//!R3`r3n%S@]DEI))Qc6-hI<7/FPNVqF&c1ec*>1&%O6@KP/?e\=f1l5Ze6TjQ<<mF#h^n#bed4)NggEP^>fB;m-@0DKcftg
%,OR.*in?`";e]Q_#;QUV9gWKVd+K[d-C9(C6>&7<)nEM<_b'cBkf/dXj)QVed(aV@RuFdCA"bTsSgsc>TD!UJI8M^dBtEDf__gI9
%qh5tsXJ+dRPbk.[Tf@ENaZe$p)8#:G9"%a_)F")P0#Q-_q)>h[=.;n4CMbcm19:rAOJ#s`EuN)tT;Ii[p,ZYRmeB5ePCGPG2@7#i
%!\_;r=";E<""u,2_ss'bi+3OGR06hCJX8sdAJ06U"C<F+QOsV<%$-Zk:7feQ"H[ekCH0lWU`3BKi`ZihaN%:ug8jRI*_mTMA==4%
%(eKR'dlq'!V^fK\=.@:'jYcli/Ph(Q;6Mg=B+L1u'E8GE]sh"@?[.>`;2u=O3%TY#H+eG9W\@`-HPq+b32sbOd>e15W1$[n\lfc8
%Y&UV.l:[?+9>_t&IncK.S`<>Ep#kB\2)jo&IZCF,P?7Q)@hMJ,Z]>=BjS7SCm35PlaeniK[.f[BUTrTf=F4^%*d6Qb\=jSfEf/pt
%j7uF+j1itHphrq%Ai^$hFu$i%p2#*dA`BDCK82?tMgJN(BHBT$6p6lT'6u-h+W;?/BB@daTClBj$p)pVBUa#5D!!_&Q]RLi*1A&D
%08j=6MCm_i3/0YS@uQOG1PoV##1nMe+HDRs&!Jumn9KHqa-ae"7dX_5EK!I/@nbl!ruM]Q=36_)H.2_u_bR&^X#+.ll?Q:eA\Tbc
%OUOI=/QMi0CnBU%,"M!-Chg[@><BNEYBj']/`T!hh/9ogX"6`;orp>e'lt'33iI/\[8-Y5+#g6Ggk:7P_qJ=d,%&UokpD7K+1Y.j
%CcokAFjn>/N@HcLMZXJOXj]BoiF^!]aiuB)A/005Q)3*T@p$*mWPg,@O<uiHL:4'#>Qa5Fe.'Q1j8BA/#5tR;cYgL=cu0Jua"o,g
%j/Sa4193q$mJ_f.:PKae^"t!;8Y@nq9m^gFe%P<g@FULSXIGI@Q"r1>A1o1k0G7FnW?JQsd9Gse;.QYMQ!$"_f*U*V,SiTsZ$>Ts
%#30d#+T7j5r%RNeM(^ek^0Eji2t?$b_^uO?DW8o8]X`kX2t?$ZXZ)TaPe?8;g^QpfS+q'bjNlqd+#0Y\>`P@Lgpr8'2f\"-mbGaO
%],mZiff-^?bI<=*GNm%?Ep7U]B&_6uRS1-AC=S>*Prrg[VYbEnm=QZEN9Ei!L>b4n3=?^`a_0NYFX>%^q+&0%`2#TZLl8FeAHaC"
%:jDpp"YtfGN,F_#-bmecJ'b,n:DO9Me7r'bp"n$j>iEP;mq3k@PZkI6(>\*Mq!cr*;9o-!$QH4!nA^WLDHq9>04g-S3V2,Cn/;&j
%0\pF.TZ`$1=)O=?)t37Wh%8`r8+JsTh`7c;j.0p2T0\ZT5-01orqu'6aFG8lB%3\Z>##!HHldcTYfEtkpZHP!-cZ\h-2P0q['@0X
%_%%];HBQ)7Z<='taE-$/%s[t3.bMZKqH(u3YgIW-'^Oo.%@-tC:]%[TeWQ69g(-i.+k5TK<T[5jc6@T[h_j?YY?V>@JINo>a3pF"
%+eJ@^CTjF;cZU0E1ZsiqHF9f'[9LoN=rU/I$u:J/F*se.nS<RGH#-1Fs.Rh$0o@;IdB><_-8s79^5s?]n&F'0\oAnkCMBK)[hX@#
%T(;*;cFA9V@_@?LPto#:HlD/tANj--iMInNk3ukV/o"na!KDiAL\sHWd?eQ-/Du^SRlD;U4^:sK.'j/&[.eN:;GUm8hCrg>hH$J%
%@9dE=*%/mK=9LSRH8,s1O1JZ1VY;k:\hT8J1?uG*cQ4FEEKilA^K*:R@g%)JZ,'9pH@Cij0L"[i933j6'QF4jptVsSMI0L=AK7m]
%Dff9ZRp9S!=+BgYR&X]@$PT(3BXf$n)TG*u?UsC@]EktSQMSpQInLncn!*j@LT>O7@I<h-p$Q.Ll87(`?),qqFW%BB[[=R-f$R2D
%naYpP`!qoc`kFp^YD[6+Vjc74.$cTS_s/<=C)NN@U\D"1jSgkd13)>pl`OZpNP#u&Dg5n'0&1E2J5,G1ZI75]ihBrlc=Z,taNjCZ
%oWbd$c%F1/RW.&lB^?2nS"tg)C[Veoc<@n;`;%BOST(cQOQU`+,!+s&EeM8S_sd.clnY\u/5=^lc0G")MNOArAAt3L'lH(#4e%Pd
%YfY,'q8-rnW6$4Lio$C+DPtqL*p39]_?eTfN=1/>cV,:'X7P%`U;eDH+a5eK96q6I3:CrKjfR$G9K\jFQ<kpfQG4ccne\FdRNFi,
%='E)8rRGL3q%sa^"@2jf>Kn`<Kr]pO.JRq2<,\5?r;PI:2ZFQ8hmOGOqK%ibbX)[eeQN2t@CakU*Z&-_R['YX;qUHdBT6*l=HL;#
%<#UbmO]30tl#*QPGXR&TX2jE$r+NZ<<"#EpA=)lq[W]L`Y_.j733BK'*3WaS(B53NEFasO5JR+er`8=VG#/a_9C2GZg%r%srrPtk
%I3N^1OAu*NPk1?BKNWJrIbJ\X8L(:?M*H)k&H;:8!m!:u;2f>3$bV'k%)Tf("T?<KUX1=UYS[P8+/jYW9B`(uMVeBO^L#:E^(K^-
%_F3?_iR;G?;#?f4g]fR],W/a5kC\Cp:!/HG$Y*7>UM$XULjQg;mUPS@)@N26ZqUXEHQ<S.':uFdp\t9^Z9S9dgK'U=]::K$RIkgG
%ZpB=VNoo]"AX!.W.Z!Qha.8j##H\2bqL>A)(k>pLK3EB-<UHEAo2)U^LaMQW5LKO.%fVmDD?MXmh`3o.X@T:0U.YDd_u)m.>U8k.
%m9clun*Np,Dg(l)<'&ih/(HL7`Xc.^^WC6%fmf#FWXe;gHj]6*1du.P.,B`,Y8J]Jct,,-*Jr$!a^NN%d710_&mndRM-$F@rf]b?
%pCVDE;06_@hc\PCn&`NdGtrSILC^(Tm<<oZdpFL=7Uh_9'7KI:o'[3.Y=7]jPXO]H'j+_fTd4=B;sOC7Dg&;/L&,/[k@Uu>p[HMV
%=7;p"-J_/)H?7%"SEJTp.s1^+U[>S>\7FJu-AD"?IZB6BG5S)=KR;g`Y0>L_CD`1>\WL6X_FRqBX^%J#k(TTQ"<RR94PM==^2U71
%?G6pQo1Fs;":p!7,^kt_Xikm2d-?`^[1OMS2EUT,X+R%WR'W>Q`i*9Z.HA,>RH2c".S/6P`&^ZR?DU-Rej$C+k\i-:://]$Em^E)
%RR*7.^U.n5Kd?L]Al?BLfVgWfqN[hcYgmL_gR80K\^.\U(q"P#W'u:><EkHC(4qCGC0,/XFF)&3Vj6\l+KX"iG6^.4gMZ]4h3?Iu
%V1,UJfWK=CEMrf.G^uDZlVX@2Ms5D]K=AgRUJAL'kb\fCj#Ng\\C0U^ZmqVMJ]h:7SAIRLC&>bjK*u=&C.&m'h,^<!MeT,WK+)Bs
%7tl,_*Hu1*Vu9)R9R>ZR-V\Wj>Q#U[Vj/6\08(i.hMP$ej+Qd%CtqUpq(%pQ.(U%^l*+5I24&+UDWiF,24:UHRQi:XSb+c+%(`l.
%EB!=`L^Uib?bO<kXkp)ue/S(P[WN4*r2e:,W&1sCG/)GLi*QDqgkb"E2Up,9KC?*1n$^pdrs/pLrgNEBH!IgJ'[Vc-6k6k\?GQmf
%-0#&:YN"ti6MX;4L$b7@Xku3Q'Bl[Rn$S!cY37(HUsiB"6%uLKrC?dE(hXp0=oGCf8rlX!1;Yf+VsLX$(X3NG8SNUThe6[+]V?W`
%*VAYdZ=ZB#mDP"IPob&q_MC;>jY$R\^8al\DR?F/#&p#FD78)NVhh=u4j@Qhg?*[,"rXJj_tMsZ/"j>f7f4KKSAW]Si@m9,@cg.n
%)&ITeWol53NM_tQY?mla/)?_*G'fe28Skcb!oIhL@A9.d5po4Y8*j(2kNS=.:i4_:`3'A0r'd-(6mm+H?4V-lCS#A@Lc]J/$(TTl
%..$T\B\G')iHkc_:#.ij/NT#/X&Fplk>4e0dHagdqtmeOS8Cm]Ah./*U#+inX5jIVfq2Ti[<hl&@&D9!)(p+?UoLTUCu_mrf5Sq[
%*-8,89H<SY.l`(pFTU;6ScH7U<918>8.OfAgJ'+O8B&>[,:1F+GEQ'o1W3`5[+u]akc9hW(KS"g0#a,n*[_kuR3em@\B1$5caLFc
%!OC)f(`4+\P%2(\E)X\;8tCN'hc^7RXY@l03Jn'/Ha#*d<1"d1fGeYW4fPn$BI>0/ZsuL*)Hs"D]Yl_2k&W)W6P?]RNE^dcT5SV\
%HQuFbPWj?a7I+?pH.XTWKt+s,30j(pm&K*e>^;sND.#Ee+jM64ZXL>p.+[H]]Vf<'kDtP`Wh!SF?dcAg4!iq%dEK@_G4!FLji'O>
%o"5&N_6)Es1+sQFH*o(5M5$Jm&-gmXiJu9kMp[511P#YoU/pqc,0aSLm$W5QH`_IoFir8U@gSL*<jn?G!%f:L_FX[U$3rd'jUR\W
%SI7strL<!&L)G"O7,GnbY""p$XJK5_?T$VH]/):Zc.G+i69NcWDZ-MJqF/\@dc!Fp/1qs,>IG%-NN6TR'KFp$HLJ5h^/Es%cf=AX
%)kA2*nqndE<g/QW#@I52I@t:`Q]U..Sm9jV;_,:;FY\:J*6`J.*g4N(DKYrB\k;-D@k6a_Dr^3&8&`Y#:c6Z;CIi?STGbM?91HP!
%iK#L4g9%e&eXr1a.bUcSls<<-e>Pm_V<QfCYY.$]7\uXX*NJ(0)e^=aSeU33r09oD17E?JqK"(dF#,8V%E>oR/Q$o!hFh"Mk_O9`
%*SQ[`LKQJWMp>\p!W9%")HAkU9YR_?%$3Lf!`ueq(qEaMcAVJ96)E&Dli>LOO;PW6cX^5Rb^EdIfMja-L!<CDSWiKW8oh:6=-B>`
%\WZRZkci_jef%U\5M<!k3G^Q+'n'cIm2mT9l(3*&?.s2]HCnu-FGgBH(jhSiHFMOcO"(EO>i#fo+ahikBF#&=oe`ihX^P_P9!Z;)
%jW$/E*`pF!53(N2[YfG$_OIpH'HcLu2pa*8:\Oh=/nRHRBb5N^=f4%m?a@WS9omRV]qD&sO%-53]X(<OaoKKt9hF;L4tGVFQ)qH6
%6-E<@HC;_1(>[/oT3KhAQP_g6U8pU+r5H^0;6TJl#KF9j>Tr:9RmXl.Zbq6uH5U;97`qW)W9aAHESF*lR=tDiBm->R;*?d2Y,N5&
%G,8>DO[3U&EXK#15J%na^W<03,ob4<'[JiOC'<EFNDNob&fq"PT)QCP=A)l,HH1$gP,>HEV/^f&qcos]17guG+eNIuY!gMChs\SH
%<gCS"k<%rTh=Dgl?)5lZXnlCE@k6se`^rfDH/5E@HR0C==>-.q7Rt4)0^;f=;M,9\W&/9>IQiQE6dY+))[H\rnD&pT'@-6mc6]5L
%f:GZZb;#K;TUj5dp_A)%ol_Q4%E(Za;hM4CRL5b)?u*/s1Am@G:VLK_'K5&KAtU^]ZGAc3R;qb[2uIDg9"fMukk7P:pRAhsg/r9b
%'Tb\"&qtW.2A!YML,QHP7*XY<`(i+.h]=B$oh%k=/*lMp.+;pHr-[IppN6$+VjYN;`t&q8mq6";pG_9$QTEGfO6;Rm[pH/lR[nc/
%;QgeHGQ#"s=8b5P95gFcH0%2[htZ6JX//S+)Q^&%YJPXpkM<DEDY[N4B\'c,[.'peE+s=#h-K<[F<8gd9+)]J3kEk"hX](c2]GDJ
%?G*UBJ,H*G/f#NKSXF8gp44P!b%pb6K9+?)j_pcX]oR6@V:4!bQRJPO4S-M+dpFVPGP@E<2'2,32!%*j`PK*[h$p*ri8'kuJ!>+X
%MXN0heSI2EH"leZmISbR[s0r4T"W`_RsJ*sUhLZQCL?fpqrP`AHbj`4WUYH:E;@#QEZBJ61Doq6^Ke0*^+V'%IBY((U.'9-^)VQ8
%dGOAA0<a!YD_9:hhsQeRk3b(f,2QC9I@;MZ2DnE=Xbo&9/'$NG_IDc$H[fZ'p$C:uV3M:(f2go1_^FnZgc8]><\#Qm>CC,VE8t%q
%D-N&N6)T2+l[8ZSMqW43hU;^NSXD_=V2_&Chm%asV1f`+/kt@Z]_f?@C/uFHc9-Q`n0g9pj)I3f*d&"L;Q%*Dc^`56acP'DMs`[D
%>jrjGp0=XV?XJ(XTgQ7q4eA+3NL(U#eu@HBLQ-XR/*i+;p/YfNJS-@lohYRX-c&F@bKStXg8B5Zi6GsVpIXrtD<ZoWn.(K?PJ?:q
%B`_:1Q;=CV3CTV0C)`K;q9H&3UWVTp[9GF/4.+%.%psPqDF2fS#Ii;Jrl<6H[70bt`P'fgZMhr4l;p!7o>+QW$@Zp<4F+4nl]e"_
%4]V[P4^MBlI=(pH:GZ-.NOQGLoJG'4q*hTBcfl)/WQ3b,'mg?&\!G57N:(`AIHpVMrGU67DY`$\q=)eTn#M_rK=f>+_:porf"Lfr
%9:IHT>NNbnqY-iTTBD8KRUts*m_2*Q8&+b;Fl/d9\*Ud]D6B/=mHq+,^\Np+%SuO6XfWR,ZjDL`^';DsXd)WumX.6I=k_YUpi<K!
%?$e$*UN%kg!$op,(Z3G!I964s\+ITL.n^8^^"]C>(VTh$bmbfI^k=n1pRPN7W#aljbnW@W=oDI7GN=-WHs3u0r`F3/%Mlf3Y*Fi5
%*mW%^\"YO.kESK=H+<]),l'Pcme.MofSt`f(E:[mq_)c_S&Lfh_Ul2p_jA?*[CH+]RD/Q0;6D1&&\l($`G8EHgX@[nrq=J!bXQS(
%V,uZ/%kSPT40(4Ml4S*gl$_:@S`uE7j4/%O:jor]$9gLtKBKK3]^[U1q!D^pF0c,!H,gPg`%P2*RaUW)g'e:W-W,/7j28ualfG!5
%]4W4;6XlWea)[bsYKi;,Dej39X0Jm0(*B*8-dTNdO]&bJg/mrdD7(pHAUeUh*Qt%KrVYJ&cWYei[Jb(?>H`4]gh=E;Q$/5Ghk`&6
%c6NM!=(ba@S[J?9_5G`TiUI$8pA+]n5I5@27-A[fnA01<f%W6O,'!;3qr_.WdgRlon%*:-7uuOphL@+!GfP0-\+coYCqKS@mG1Qt
%n69C?Oel9^(GJS;T_60*>X"Qjf@Le1fi*X(s1&$3@\SQuM]oZKl_)!Rp%\DjWd+et"[PrWJg4H,]Q9r9piU1W]mE<@]6Zsug\o-i
%da$G\/*b`boQ=m<q+?d<I!nNU@,q6lrNX+Eg?J'Pl*&kZ16!ES9:bAGI<f?MUH\OYpiLSR)$DTCGH;Uo:J99^WRFlDUUG!PZtgu`
%[hg,-8+a:b:C(!(11Bn(1AAR@B%)Y&q/Yb67JH^LJ")J,A1,o5cQEIUUUA^Ph:$6;gUFJ)U)LMk1s#gHarH583@tc%@4XY-n`$?F
%<m-V@_Wl@[=p.VGGKN9^=jtPU&uJ.YIIT/X5)?%Gd=\cC/1U#5G]Ga8Sf6EloJRMbe_@"oa/>)W9qHk"bE>?UiYqt+&u?Zl][ij*
%.Ab,)1tg>=s*V"s(]u.J:?1,UVX[)J<UE"6dAY2q7(,bg.>`f$#?.7#`'q;[F"Fs/q):I4qDIk?cj$,e"lsY0D1'"(@I>YBQa?JH
%+*a7Gn0PQeaNtbYG)aN)ifshgfX8S)MR:3Z;^XG21.HFI#.M_aIsR9G($!D=h`m6NP9*m#BI3L/UhiiJ30.VbB;-@?^a)pOl^KpS
%1q50LY9Y%+qKob5K@5q3:HM-s4BhQaLlm`eD-/!AGoF"bqj[G#]HqA^me+C<=e"nhC%pH,k1\79GaJ>Y6c[[u;5m.@o4VY$l`1Qf
%CUY?#U"6=??p<'U^t`5$B?DSpH["<fXjk,P0<J8N^>G9gc*/ojDsLkVa0\9Ip=S2P\!H]3GcBf"\`p$?-JVdsrZbEh)1TlAZh3\%
%<4$]$hu6`,q==Eg\Y\Ed\?t'CD_CF)ko@LKD(M73fkG'N[?uG\2>.jL^94jJIslEcq@blhn(Ohmg"f0Ari@ng\<cjZ_,34A\GA<F
%\_)FYd>q2\.-p5\E7==E9Zr%c=#dumA$'l%c*fD1]_AAZ>jKe<m6=3F(^qguji,9Tj1OIB>hFT'S'FY:cUF=U$),XQF4.>=GfX5e
%;@b*j'KaXk3P<%LU<KM/0:(;.9i7/cFlOGPp:%HMp&'mAb@U\SbqORMr+>3B_rWiO553]/[U))&K6'k#\ggDP:]-Quo(ohgP%"o]
%#EYjDT[\?1]PD?MQ8[X7,dJdUPr+r4j<C3`U@a<25>:k1flFtpqS^)K9p<-nB9sNTQCj`'Mi#d:/0b!hV8(:KT!`JY7+'51pGtD(
%`W\QMiWCKCSs=I;9/G)rkdt-VI_+bp]tG.0GBW^h9_^[=Xp>Ls+&D=+*<1"oSlWM=Y=[YnOZ$Ht'NdPE2+*DHetJEaauoTV0?Y`g
%j'1aY$-c]G[F9kaUO&'mV#BD_`RR21aXG!ZQd632XK=DX?r,rlF;ddJR_AU^;]&Im?7`kE>2""o5FfGg9C75==*jIak8dfJrPRJN
%=/!0Ih[3-T#@#bK]@_AZh2FDt;eu(HR/NYKR\iY)F)@o*3I^;=^Y4%W1FuX((V[`e>d4d6Q$$U+c1^`"AZrjbfs>V/[kd.9kt<I/
%GWD,gYj6]jek=Fq>Ff'bgj\d@mG[]=8"sd[*2(tgPLS.Vg=lPuX^g_J?!9AcdTkLQ1NS'FG\3jKg+`BCjDN'(1SKilF6+4/LL1dm
%SY_f[X&!9TKTe3ej^Vf@0AU9+a>'0b38%$dPaA_]YnF8qH&JfBQ$Tq-F8023',_OchcC#:bRk:<`dModPdtC9f7(1!ZGB8tmI8\B
%8:g"9>J8J.%sC[=jl;]2CZX8a1oj2el8H3E:Ta31o/fi1c*_FP.E[0lN4/+:(A%(JqlrK<o;tO+NT.B@KC1SL(85I'S?Lh)T3(d%
%h"sL_5J"8pIJM&cU;Dp(l6@25hn;P$Lt88PN`HZ3IB7'5)j]BRfYpoAI,bJ:<3Z+s]p%"0Z>$Q,Y/[ML2@oN'@Te6J3LjEXc<,R\
%]W(*(M8Hr&g';AApWh4He$o(pl_jDObMq@T@d2.TXeX><m`ZUEk2*Gj_=EFgl^.m8<%s@TQ.J6;4G3mDbtU`00CG@>r,DE0h4:tP
%481t(%gcgjNUZ@Pq8LkU'Uq4a'O^OlkhZVC7Wa"9nF"Tl3O=%-<k#]A1CsFO;r?QHgAB'#QJUHbooc:5ka7EKq7VbF3/,Ob[lB`M
%mD1AirR8)A2+F<\3Ni8EgYq+=rP=t)AF%L+f#f)+5<Nk*R<E%oVHN]LqXhg>Xkl2L?<7q$#F[3^?`$UYmPb+ABVE.$g\PTIQkX^X
%8$%,fG1q<<!:@KH_WD7Yh<C)?H$([_S#?8_B.L/ehE;l%&9[`p\b1eQlL3JLdS&I,ZV_0C'a_d)-lp8#-g.!eOVmbfmlt.Urd;!+
%fFY$5X:FgESQk3nSZf/\qX(nHkhFiC24ptZc6FSu)pmGRX4iS?*Bpc%S+E[6QPPnAVHL(Q[Q(\ER>^p'cqC4nF7",G0`(WZojcdh
%5Ch2G>N`gTf`GMEPZl+s%tV)=aWsn$s7;:nq6[6$lNX=NH0i0+;+Yk->2:b6d5KaCqrP^S>psD92:QrEhcX/4I6Lh==ZY8cIeU+\
%?A]epPg42FHMD@Ah<oT#D6_kPQ:#]gcL%J(^%c7iCj5S5P^1P2X3U?)4tiY,XlI'@Q1eR.Pf79p=/RiMJnNE'Dn^^+plM#392]i=
%M\,n-U60BgQeibNp5Qn\pb2L*ic]0VC&[e7'>njg5Bd"[CX!T:Fd)=^pQC00LuhR`LRBB3d!0XPJ,-+l*IB,&So=>GcbFS6jk59o
%e]$dbpYHNOIe^X)](naa-(6d%8Y)E"A-6S_Sg'lkh'3kVpJLa*[mU.fFa.Z*id1@jf4Xj/DS9<?h"fAK+1=5LF6GM+4aJrEbG"ZG
%.u-pVP`<&"",e<fpf<hiCNnZcX':TD3A*OCE\AcO,P#F,[efE%2]6gJD/-bm#7'l38;m6(Gju.]M>g36,:;#1m_c$g:imKHaB3c^
%XgDdq]B"r94]ts9d_93HV7)EJDm`(>,-C;"8,p\8Dm^kQ?G;!3Yg8_l>ObV+X?!oU.]M0<)pQp5B[YCO`T_I5oq3#c]NV(Opomb5
%Pn']ER"hjF1;%:Z.5Ip)U\RtI0'UsCqmUUNCkhf:fj)Gq8_i1f&NfG>9:#0km1#3/=)55?Td.]QceI?"j4P1V4^V+9ZO]\<^4+QY
%a3<Q[+(#ij+uT"<\IgCKAPY[!M#+WL#Ti[_3k"57%Mq4K?HlTkX67s_Ehh%]3oK0?P\-lbK@L'>nUYE3X!)oe6`Eq>EMmd]QT\A`
%]=$$:cYe38B`mXrT.E(!Dg7`JX4>u(BC^.^Fk0U2mH9*;aS4lP)sg<Q*1l$%:Yu%/5;eSKYmOg"r*CuGJRb-A%#otSeX=Ye1PEY!
%F-j:]nr!54j^"=$Xa&^P1efb&hU5kCD;$hn#=mOZQiY%HhcF-f7UK<7bWP-=N)DqJd>;-lSpE3k!?TJN8+et8MosW$Xk*1bO*hS-
%IUagOJ$`AdT65Lj8=s+UH85/3`I<0f?&7\4T@0mOVp235Hp;36OsTbLC7H$0rDIme4u+qtMr0S6.aQ3BCfq.$rO=X3Lg(D5O,P.%
%*A^V(U)`(XBSVQ:S[Gl%,9liPrbh+<1A9BWAk^!5GXXHrkE(h3po:\W]0p:QoWXaOL1tb;g:t=.$Km;U@4M*U6q7$P))$=a[@7-`
%mH8\%n9!dfb42C`D7Eu_QPSJg?ck$/0&B@kSHldC:0XdS?X6k1r0An^i6@5Bb^QaYd/S>WCA>#=g2;_[N(C+a?g:D$^Kl<a_BnK^
%ZeR`?]':PkXcL<dI_U`Dh9MRVa5nQ)hd2i?s&&N_I"/XuDUQGkCPut.7?iY19#Qr0:J.L,Q-Z^XJ*-9!E4a?9#dfc@/&=u_[0T^E
%IJ:oi)A/ODeZ-7Q:?CHcEb!DOIJ3[#q^.k.D`NgWaX44+*;%jsIdS:&KAuto:NOe6?&oN64E-3o4j"EuHo/<&VuLq?e3#_U-?:^p
%j;7!D[A&emOW!m6fsP2`KYn>p8Ar4+VnX]RgFM[*%<b\B741ac2JD][H^QQ80`?-TFB7/]QE8'WD'P.bpf`-N\6FDaIoK^DrU=j<
%'[Ejk]_cj<L:K4IP:j_d4s4G5Xce[O>V0g,I#`R*UCY.nP?HA(gS?@Z:CEH$ei1+KO&j$O>?d(jp!k_aO5H,eRJUquqlg"Rbtm5]
%Yh<.Uj2/XaVL&]QeZ(hcQ=!?^f7W5^Ri-D%#K,24a;0$.p40+<m`3kg&)kpA\*)$S,Z+LrHW8]NG9?\=?WNa^-4bE[]WXac4(0ne
%_oL])KDC_Ojj3T1G78Lb#%I>!FO98@A%6GXNgFL%jn6X9hLHJO3H+o,ZSqJs3Q0TeI@P-l.*+g'rBs-)iM2:\KABOiMTO)l+(7i*
%YAp@B#?*fU*.D<lg9k\KprrYNjm0D/;Y0.TXgP?2T,fW)+6=<J%]si(HLUkd$gX;.\,H-sD\$M?nX?a(M;XWRG[Va\%/Xt3B)'9&
%oDA-'53L'l'%-^&lDp>/\8PuFG\OY!>(,t3L3e3]I5cJaqWVm>Zj0Bqf(L(<rSj0lmW#Xi<W:m>1e03g$!?=n-oiAGXu@8IIV[?r
%'`OTBPiq-@,&;.u]XH.#^!#ZpN:Sf(Fka_kjVNmAT^?WpdV^EmckhZ+TqtM.]ds=gY958(O^i%9SbhS$ADpk/#%$[lYL9LP3r.C3
%HrX3cMI61tU!uYk3p[p.h7-;G`.d&f>Yo?"$f/=JC;8TAT>trXd&m5]fiFOF*<%ehdj0I^l9_>*+4G=3?0S.eGh_>2l-HO!QPoR2
%X']O!W,&G:Lhh/2_TS$n*`_LM6G4iF'b%[C/^VGX!):<qU"@.He[SH=(]K[dUE]U67%G&RrC4IM$YFKXSXUD-hCS91`,m[nZ^Qpd
%hPXA_%atU3]7k_*"=:F5(D+5C5oR;fWOK(Rjj"k*G4taoKkIn9+.7e(=jscN\$m.q]W9)&k$H'qV6@1He#gbi]Uh=2\r>bsQdh4#
%l&P6dBoR&um1Q_LW\EVM:!ju)q?KEiCTV2e)s<]#6("B?LFC>`^8s7HHQ-sISWEB6/t)W,X3-[/\U=E.!='3U8c)SkAug75Bq<9,
%DWuac8,94-SH%:jZeBN\1VM+_OcTifIUKfXCF=,oB<-*:>E%MD=45](W_gn#*NuWIEg]JTOtTAWRoL(f2!%brjGBJuE`jOTN!_Mg
%Sf5VqL=a=>b++K5hRfouc=J$"e4U%K+*f8,QX)(@40=--DklkZ:@tfXM\;#E0hCj*'k`s*=psK;?:YQO%VMWgXRSC9obniKrNMm+
%fX]l/Qm2HK`lW,m/D"0%_j;)+\Pg/3ImDV1HBotHUfrq/TOQKr&/Rs1S;".!Thqne!A1fs<3a(MiLnK^e!FR;$r7J]Yl==Z_lsk/
%-VO,LM4[l!+M!$YNAJ7a?Y#so_8Z2aL,^u8]tUM.aTYpm`H1W:PBeh,^6-^A(9U,ZlihR4o]"]erol_T;K#fK=n.NnXCWm:*N0ip
%Yph"[A_/>BGR[elfY4E79O=^*AMq,HU;,!'_g@fFOB:jTVT1HfF7*PuCK)c.kEMj,Z=G8$*XA<l?1;U3e7e3ek[Jq\i2d#rHp_N(
%lQu;pr=_:aqq_%%$EHDe72fBY^]o8m;8IFmJg1Es6NF];nG@-&gq$lh(H.`K9[h_@X$$?(]hH_ZCqWWHV,)!r;tIK?o1(?R+.oXn
%Ds+e5;h'\&8Fmm.lZ5+YjV2"Zpk:`K%uQYn3/(9?[6b<3$Z6Xn/_:eh6q,_tliJXYHWECn^aTm=.]iRIRiC$L0Cgf'&/B'6pBtjU
%'gk4$@%etQ:1,m!'nS_K0ldAWqpOA=:DgkV$$:!QS,1)pGS0\Iko>6/U?B(o'W^Hn:4ucfU@/8J*m_)BL8+Au[0smH(%JrDjtIE6
%#%SGN6-ZIoC,U0$ZHFtXA(_ng?83RU'X1_1\-s!=i=f*'$@L#+AOG1+6OfT\AVE$-DUAr"L3TDq-GUh9Vc@j+d$I;s!]g<k+hka[
%6jsF)#_Vqrd0`:I@b9`CIBR<E67sp3GThN<"AQH>iQLn13C2`<'(5s_#j2h83>'Qf.u'WCcel,NCdAau_8u95gg*EZprlWdF?^,B
%X4ea'`=M(3KXid9ZN`i_Lj21OTY`4((89CT4ZT$"L[J:f-UnB8-B)3ChE^Sq"O6E4&T:?F]R.sPSD0\k^M*F:3,V\0JKn#coHE9e
%:da2q6idF2rQ#t<.)C,g*fOe8],6DJ>oXk:W)"6lE/>&e>0Oc_6c+N;0oZei>hA[S'6-F8Ic-#5JqK^eN0H=.>-8lk_E9C]I4/_c
%N]"2BTgYJ5I[W.$I,C`^ZO:2N_TtN6l=fpX(Rh^&*:CF$S3b&[eJ>;Rl3%\WY9W!2!enGjgOu5#a(2Aq'aYNl+Hp$SL5N)RN$_6T
%-arY!0dn9:@UOJY/4!(dp+lc*5XFTCMC[tljI.O$8/Ni(Q:O*!;](rYOZ"959^/GD,`Gm"+.5H]rXo@5Hk$l:Q-CSZJHFdH"%<rX
%DYg?jH6/A*j@R]j7DT_Weq'Z@)[X]RI;'[^q3,u<LCWu'6FENfVar?k8FH#\Sh1d4!H!e(LqZ8JFqFGSTbHC(B`XOG,Xj,*l#6nB
%d':Ym1pCR","l:c-TWK-)\QIj,#:*B<q.GBG_%mdO2sS\MKU3.Q@9?li^2'g,bV[k30d>*M?r:>BJHe-?P!i,eAk&*O@G6s7kU5/
%95#*7Adf5?A4_4a6j]$kkpQ]g=U8LM$^6tL3lDJFZ<cHR+o.6q`b,cZW1q$q+_)Vq6'>th-Ba@)jpofO+_[#mV2,I.([W?RCtCEW
%.!JCY,h*"Fj+aA:-t3p+!XT6c/R`a)(m3+gAd&u*A[&,,-1J8B(*Il=a<6m47s66Q)fe`K_@RhD%gt"`Nm+nE:5p!-XFcVrB(Q\3
%Bb1S64s3B\(M3jIqUgfTTZHX'-+W>of0DSpC##'>JsIT8MU_ljXlcJ1\<\W]kR(NJrW4SUjWl)QI&RDrk"$=SJJW!ad[!6,F]^=0
%a<L>>+A_bBDo3(f7tQC9-#4h6X[W^d(C`quZ]N3/aiXtOIQ_&_&CMY`g#rtm_dGm\3_]1Q9+ZM>N9](/A4]Ki7moHb1nt8,`>\)$
%OspP=fh@JUI-<pbp^e!Q8.c:B5qAtUQ8Af`&42qp"b.M3cF%MfhE\).-XtR=mpL9<8\&AP,_p)*fhBIU?W-><l32f,cZ/(388.gU
%h@/Ls&6hKF5`4"sL5K4;96((G(k_$/>bSM^M%/$'=J5%KW"C279LD1::7?hCF.3G\3,1lS2c3"1poYU!=Mcld,Y61"h'`AG5T=I_
%T$kS[TTg#?"q(lH$>WS=:>*c:SZ$ZY$N]3X-ujOJP:5Fu?)cNYnh$_DRq<3tONbnBSLd;E[Z"/d&.ZW*FV:rOeOC-9!SO9S02[CA
%_G!<@*T:UcK-kR)_0Lkj6tDbp,hpn9B\'eG[EE`+B"JUnTnI0n?s;5;`LaLmZY3+-qE.;($HN5-e7`/,`#gsF,&Q(m13>bi+O.cf
%=s3><A'ZDNRY8VODpf`9i<he:V%=$C4\3k?]E5qqV0fLPM%4?c4!7TL7\@Ld*j(Y@CLloR50ZFFWbl]$\RT/tBN_Ol(JrG@6;6o0
%5\/2qL,8nOP4kds2Q.^S%4US,I.7L$OgHXH'_4e$d_>[]\FM0p#gX3#JCl%YL@Bhrl-Ys*;A)e6.QeHDE!6<hoaRV<hLX^FXE8'Q
%/UUKUdjCX,[7t'O#u.n+<eu-;g8+!9C\D#fcnW2f0FY;1Lj`kc4\Bn5U'.97)bltkL(].PNdTa6Q:/<um<GL'-"8$^q#e3pqRX,/
%TkS#NE'.'Y8$N"V6ea+JOTc;-9E50.g9dLbl-q)h#-EU7Eml-SLdYprE(QbW_>utpJjb>6"B$#8<GF45/7p*\YcPoBVG2BF@=Jk\
%C*1qZe;+)16c-4o4?H)g;g+cnDe^DHjs+(ks2pEKI*5G]X\JT.JHuM);UCIYbuZ6a-o-ced#[5.Y,O:;[:oIeZPb;c2LT6Uf:Xm5
%UR5(AUk;)GS7/Q&!ER"%W]'-n!/G-sC&NBR5Q["[J*eSUYH%^+b*b4::.0L@08a;>!0r>c6EhrDi?:OK+hH`fn2CVD2Kn.8,@dKf
%<GV],"m[TEQ!CQHP9t-FPsL%Ybr_DsrK)XO5&]83#mSmuF=FM@<\b3g4&Jrh9N`>.67?BoL_LVK-'Inc_JgOj4W#cFrc2%KErgZM
%0HhUXie*SQ'bcHk,&DBY&CK-sV*lH->=JU#[ZHl8"OB\h=!ScTBuGm6=+WuK-ohLSEE$#uL"q]aR$rSbRtte#ZRji2n[*E5&19q/
%_J?*JLgYX^bjEJL+Q(XW!Rq`A)G5E:,a8FtYFq3AEd+6+[1@;A,tL"U)USYZ.MWT$!sbc77oK;IY2b7i:l#VdKpIfC83*NW>aGtf
%J;s^UB$I0ag9rZf`7$k$G^ufp@!`/)795Mpm<gfE!2:-kU\X7X!G"X5Vu->!0Rsc[pAg<'QbHr9"2pZT72.JU,RoSjSOfp9K+%-\
%5U>L0d+2Hl64)I#2mgJa-R$Uuq6I3COr#7uOnK>R4aFc!+W(p'Witm&C,elG;h91"7"3o>dh&c:3A9n'U)7$p-%&qk<DX4#=VQhB
%4Q;JGN6Gun8>1oC__E+IiXsBeHF+AqcC0<ICiO#R5>iUOA9K+m`$0k"Ukp:@\07q<><s8u(h)JRO<[hiSur,D;C7eS1(=DI6Qt:i
%;1g5@G*d0.Jg?kVQc,9[LC/ph"!f_=#pmBH,gS7p&L)\^-4M2\/K]c'3Ik?PB/DnBh&].oW`812'T3%2L#F[&_rX#m#Y$:r,"DlO
%8W8C-:A^`h=V#g0)gp9=*!-p+L''0t^m&D]8MVo?=?7Xb&kM?D@rD[R5kpqXOtBH:>LFs<@UKS[>tG*]R$P#J:bj-0Q@e/G1p,jg
%YnpTHd"l^&UhkB'#om#L[60lo^uSP)Wh`'#iD*i<P-oq5\O6gV.ubn41kA2qqMq('$9ZkjZ/%t:I$3hia0]=-Pn@piGXDf.Lhm8\
%Zo4c,&ub+>pakkOXH9iV$c=0/%'Ro&e`g;3X1`"0JT!Fl'>k0`_keJsh@*@9O?g5hB!q^O"FG=,!=[u72%bHX;s7l@LBrVF1Xs?!
%a!RP-1X:X5R2eXk%Lr":S*)Y((Z$n"g7_(BE7=tj\I#OV@@$(l&/DS\fR?JM&#!*d]-\e\p_Q"M)-RNCr,M1h&j6\ujJ?GsKT:X,
%*8hqjb&Mf]eJR@%ne=<#+e!=DW+']U_")&-+pNSYJ.6j(?3!SBH\Pqedh!DU"-DnC3LEDfL>%Z)LbkP=)/#'ToFN>^Q=GMGLrjY5
%-qkPji#(&W[K$J+0HcVuRRhN9h[E+&3Xba788A;0WjDuIf4<m/WeD\O2@CHk#9f%;H'-0)`$H+92]42uA7d]mX<NYOZm%B)2)HpQ
%]dOe8(g:*#92*/<EX"?`-6YH/1/%b"6>6O;_]]E9(5<,qV?i8r3M's)R&?EW2A.LV1C]bA[@tM]AY#V$'qekMBc;cg`=:K<8aJ5N
%O-IPYL)`QDD$.)[k=Ue#fmmlSEo>AE&7n!+(>68H>FD-q4-5q.[O=DTALfiC)m+Y=U6I+Meh'-4QW7D$JXJBkPG4%J-03.9[l%,R
%f5[kS=k`;!"V,.N7%c@fgZalr?.T'VA^K(iUd^_/,gkZ+W\:sh&.k/.B@(N!THkPcjUZhC+ED*hYCqT;hj:1b$O"/hf27BcK+P'G
%1USL"&.-c-dLKC=15-"/nZ7RcKs5J4ANVYOTt.8A17fD`Ue!RUd\S03CcbPg/&.,](C^.qHl]'.Ds9f=*ZSV;h8Bba-24V!;G?B_
%>`L8X&\?bZoS.4V0<&>G@`8"-@DHt(HFO2S856<A'I#(?q,4kG8Bb]5c/JbJ,2<hEeT!F>76^/kj:>eElQ\pEMO53([IBGq7[/t'
%&>@dFrp!%53j>'?_ZR`bo=tW0nd1Wl5/N^!>)^7j(S6:LINV(@j"Z*0P]$ZI),Q\kbnTGqe>5X=U.G+8Jj[UI+f(*7"/JK@k<&[M
%@=S_pAqOVR"(]Vk5fk9n1`NCP&46p`dn5G-3H;pOc8N!DOkI7]$m`pBOAOh1Obr%C9R4,JFX4r\Y2r=+=ZB;+foQLX,TVV2_>mq9
%CZ%Yt8A'U<Jdk<BCmLTBP1AYdZ=4t*k@PSL@8%iH-/o'S49F8\W38Dg7g^FZU5q<joW'1`#l_+[@r8@LW_.O[pdR2ZQk1l*9)(k<
%Km5:7_o1u)5WVB5.q:-9VB\#Tk>[PC]E8krj@u)RYhatcO:6.IjG?G#AC703;(L!&fj96F&OK47]ZMA?2:f#VF";X)8Vc(>+u+l7
%Oj&0X&XX@C6F>/ucV**&35Rh"MM)D1h*ZEAQ7MEB!fR"JN5u2Vlun^q$\H3dc=*qr47($7\o&WDM6)e[<=f6*KZs)XI%\gEJ6_=%
%4#Y.=BYNTFG`kWM.U.aX8tR8h]W$\0l@k'lmIO<oTY;F<=q2O7J5l)pn08*W>]gL5Zj7hQV3AArOHO.\>R?9q*dM?=N_Mhk;!1;]
%Z_E#*:fQ-,fGWahY;n75+d&:3/eAgmI.rhBKCEa$i2O7oc?4.9ZnNV\4.MORf`Oc7,hnStdAMPLfKnZDfR%*oP<%D0g,7#L!E#Is
%1G5Mh!2T#nOrE5"SKTk](QqZG=:n[n.63%[m3p2A4h-9r<`8Vka;0o[7.>YRG'-Ms__k((74)6uf#BLk(Kk"/D:odBLMJO;1t#tW
%ln6Tq(FCOF.je5P+(I,ZUPr>M@7I1,TeJp*$6=AGBLF8@,XtgbEX5%"EYbu/1Iu4"iM&:O&.Y5M(5W'#DF.9=JEXDZSdBLX#nn6R
%"e>g(3@.i7Ypdf#[,qbhh$)S0?Rn1921S"BDj9Yl,k*>eU2K9ZUpm2&ON6Q(b1;*=9%a1oj_]sP1qYhWC'l'rB?Ae'g+]7P]eD6G
%$8Q6OTkpb0'_nA1ci?D&iFa_a%^UJ_$+5Tm&:*`A+b_VImCH`Wikd!9`#c(ibW$jr!oL6>%"^>F4cTki8k3>%Ef?Hjl4UE8[on`q
%#0]`d61E)UbYZXUTn$Cc=?YiQAVI=$R(Yk+$dueGi(l3=%MQ`^R)(n?N[45FZ8cib,r;ZW.)J;_Y):Oc\D3R+WU8qCG/!\ns!!8$
%T$WXFX5nVROdFi^'#LT8LO3?3U+YF>-4^-)*$KLoi>atU2TdiWCu4:+MPi(>!O42O*kTSTnW6ee!CrKP+d,[sTKW'h!;c1gjS5=m
%#o9=PYZ-[+;C%$T!hkX3Aor"uSr9(Canm^Jd(lc&*-oX?E@;[WTWYI5P;M'K8ql6R=8%_9)%WEj@Lghq1a.Xn/6C#**sur36R]bX
%R,K@0`Ip#$RV:66S$DoWb@=a'?I<1`.RZiraGDa,RRga1PN]g<1=@NO/_nE8jpXpMWS1)i1VR.*rX)SB,;S4kNDIPt@'h-T_3'%K
%O2Mj@:i+.!S;bA]Fa@$ghfF.ab)m=Y#._91=Pl%"K.&R,OVsfH"V3k;L4Y7Y,aR-ihJ0^@WZfZqNO+1#l=CJ;V@ObrEm1n@J.Fge
%"_qq%S=bpA%(noIip;o6OAtHF_j^9!i7P;#Th$Q<*@FMeR6=:\Ssn<._hf$aG_4rmOVagp_jP80hkf!6(;E5*5/W(jmr:lR@9+ZI
%ZF,lM1m5,rdPgnBfD!A/9uR3nC,`F-&]0VP8-DXek)S+l,SA*V.e'c]&"?%Q!YH9&9Ecs``"WdV;&FG#5<*$:T+<u7WR%QY1'GBD
%!b<G-Tj1"+KeT7PJa:G*4gpU5#7DF>$J=dEq>$Vl.LD+(mkD%pTC[RV]+K+8`tg]WcPLkGdK63W7nK;?$S%P(34?s1[s\gMcbU6d
%:EneW#=Oh$hbEYsq'%U[JBh33.6^_VS0iE)-f)&SFsPFqR,s.43FWf1@.XgKj>+@RLQ0rD_s*KJO[EFd^iG5Qh^OK>KsD%nlUEA9
%QFS,+EW?R]8JrQZ1%]#-M"70*(NqV11QKfG^lV&G+%QAZP\H):$R7S1V0en"IZFD81es<5nM])[1^W>0,2o$?cY*d)="3>e$%0fl
%:9P3a8'k\0O%aFM:oW18D899C<<PC:]RpBJ`"*(b.caNI=I+t(<*((q&H\"?6I4$a)0leDr!Gg4]PYqTT9DiRC'jYCG>o``Z`OKX
%S1ur=EK!hn$Mlq7S5XI@8GeL"Kif(h98g-ZOg#XRjC#D?JsZmRW)Ur5ZLslUdmam+TZ_GM&.+h7G!6Q8%O>qt.bMLT>)`DK71M*l
%gH4.<iY\\4+=cBlR@D0."ImP,Oj59`bg>ue+;u@I1WL<jiZg-P3F[t^)jGkp*):<,#Y$*^3%8.L=::cY'&&!/%3osO8<iLO$\jM8
%A3_+mo/*jri`[H/R"BHtA?\hM(C$#<?DQ4*:*n7l\0ChGS/\$g.^B1#>7HVTb=pQr$0.rWOs(qBk0da'f4$!lEWmYJ>2"@c(QB"3
%%MGHL_'[23;^/`5-H<l#;ngB?Ti;B91'ot_6VC%cB4m5\"=fSDI)_0Z]3&af`cr\q,C[BO1'4!5,IC?8T$t=(Ct*b2,MUSDVRh:@
%*/-'QPu;$`h-iZ:l^^<t\B<BB?X=jD1/ee1*_tcQ$`1b)RG(3IAhEHr%nR*k+sbJ7Bl2i7J_:TcWe&P+OIB3=h),m,T<-.uiP=)P
%G$YVU@ToofD3o-,O*5]U<TPS>flPF@^K@a3':gU$^UB>&+gZ9-GTh/')jri1K;<e3Bi)=iYKA7(0t<<A::FktUHt"WagajZMM"2#
%cR?YoO0B8\L4\F%@ZGLApq6u#8Npd&,O&2fnqim[GKLndYq0UHE.Te,rJ$h]jia$J_p8LZ5WSK@`]n)GneD6DUT2b!6CoI\TIa#[
%BQHWq+LjCmE>0rAiG]l1\lEJ"$bdaG\"Od]5Rq)<SdBMQ0,#eq`>K._+PTSHM@d/;%K2)=cOcr8e8a8h=cT*T5ut"!Gm]7J$KHlC
%I(k'MM\daK*Qf9)#k^N0/#*Q%G,LLHa;@a>\/m4*RF<'N]fs_h']paplu3/Q$d2,i<Iu"=qbH(<aQ&Ac5Cd:W&@6Z$a_B[.`oVSe
%I:R0<LBC&iEF=6)RF$J3!!$@cV%a&Q3O^8$;M]Pf`K*<3cjE()6A9g+R&+^3l$$Tu^&\sGL-93\97molH#PUr6#I@)WY2anB'&2m
%.J#=9M$u"DOg08*X^/A.nU))Di&f<(^lZ_UgaNNn4Ft)g:7rSl_0qm`o7stD<Y"EEGZnY*#i!mrP;:epCe$CP^4g#d(Wi7l-uYea
%-$ST54@eU>.*`6n@qlHYq:(LR6C*Kq`e\o(OL?U<Pb[D_4H4@GYeS@(L!p<F4G+hn:bX%eek6qHK/9/k*>@_HLTPc5&.7<QNue<4
%%XnY1EK@)8phuJBIrHDlA/I)em/ik#YqtUra8qE`Xlgl4JGe8SSOhO=7-7BJ,]u):8si`gEi+CT7#u^KOB9*'!o`Z`&1A)l%ZqPT
%dY`pT/0m?5/6O?`%nrh#lJVID^VeR\Km[e!KI-)ABd]M*&=0?7FYXk#+oHr9Zu".pRIu7><l<$MG7h]#@=2[+!7QS`20"-hCui)1
%#5PNT>+i_g#W]7o_\pM28q<%m*#nJ=V)CsV(Kn^.gG=c(SH7Kmfu9a`K=W7U^+q)f(n.gCP%Ba<RtM64B+8k]8$dVr;o$&[+.2uE
%r639B-KE5#CLD02B/"BZ>0=l^L=2ME(nSY;Q<^^0%%bB1N[[+hO==cMW0TrDrQNSU;Q4fiLlkP2IWc8jL.QP<SHd8X9_4886a`Gi
%j:dd]P1iP5:t\jg=PEUDk;8,STHFdiA'H1rQPn"t(oC^K9U;!'Q*,UUT@1;tqtk;/@;<CCIdd$g&>rr:L.VfHbB=qi2gdiOK=d4?
%lk`2`KM.#lnDj9#!0k;Q4D'IeDWS1("9`TB+HAQngrW)O_FIW55N(UhA[EUUIZYQ'6$dJN?3eL[q9ac29S04/KR#=NL1d!gF=8]=
%5_KSLio;2imcA."):%$\d/XOjE?XJ-!8LDKF4iYl_DQl&_62,3e^0L7`ah(h-hS_nQe.c,afUYF65ham_9JYl`*!\'O:N568P=3U
%>7$[VBe,<LJFMX`Ie$[g6UHiU+7TIo?qfitS-6eB4d&&M;[gm*e12e4VTTU7MG>Nl7uF&]gt8;23Q<GCnUMT9fdst)Kc#`?`@-=&
%&ub=1%oGXBd3)dh6.,j/GGL9[?'qJlhb#"?]cb'Hi$2/g`J"dGPO'9F4#'!k!1G1Wo`d8;1RTKYmHZZjZoSd+Q4NgKcNje>8`ko<
%i6$Cm2fMNs;B$Dt]P/X?Yel!NA4)??N.oD@,KD33]H"eep@)6<?o`#GiX[(CS/oRcINWQW4P4nqP<`1T<Yq?e83?FGIMLl%l&R42
%4-:S0pV+QPb8j62<^Qc92mR"L/gAFZh^RKd&pN;jW[ksVOM)s$OctAjC(a&FPHk^`J9XDVgMjr.G/Q;898A=mK,dCq8[B^P/]87V
%:u`,+9(`!SOT=nW'mb[tcVKJo`a/GZqDa;$,ICn4ROl@.fF3>$JMZlF_f]p"U%db=;T9qc)I/!:$2e<M*Z3c"&39&VZ'F84NkQb[
%(BGI98tj8f=:(oIf+8qeJEjRs]]8*I>0AjT)ep8=8au4[4hunBY-c>=:]m7,PVel.[Z)5(?V,r*PdVtFph]G5,VSH0&P7Q+O`Fht
%b%e?ho'8)q\bYn=0Eqi[+MPdf>^s[f<FDq3#hjO5m:TLm(^$$O4BlE[F$D`_[KCcDn'^tGTFG?;3Jj:p$X=s.(!'<A'??<IL_(*2
%:^44X/1juTb-(H#:s/ghVK"#&nbmRo[U`QK'1B,D&LsN1JLWKB+@V(5kP.TF@$*g:MNAD5AtL`EdEb7mLes7-fPG`C&8^FI+ah=5
%Y(20ZRM($6#!X<FI"2L@F'R73k-Gkg%cnKe5\JB_et/Eb$8/TheCD.`8WL*g6]aP%$lgBu<<>"G36YuIOW!/aaZ!$;E9;g-%RiiX
%ZUY7MNbe53-]DFDV`\]<5dZk2bY:t9X,#Da!C7kL27-&G$^,Y1Pc=&)KRO"r!u-U0bEFZ[PS'"H.W!@Ci"s<n4R"=DSjFonoSa40
%K*)j7RaJpE\BB)J^u/ZS]AmK,!5]Eo1o16[!0TN^dj;:%@gQk`.J\SN"u^c9.E$-g,?%_7)Pi0i!\I*i`Dl2XM@L9X(qE(Hr$qL[
%C%K?+ZFIjZq":s/`d!mlG_WlN@O3.^lMS$Bp'ouA-cR>a'h"G5T;iJS70JaHD1YTldL$;s+)0-!C(#6]JM<<mkXqm<<Id>ojULFq
%&C6ct'%H32Rp2c4Kbr&)oL(KFSVVXG_U.7$:fKq=2*LA568($o!T8[4jd8MiD0l@TK=is'$#P-]Z2^YYA97/Y'EhcU'*4^,LpmV&
%%=sQs,<Wa(Ui!%63^HP)\e9Au,Ve7&X@aVJ%OB/OW!+QQi)Ui,p--7:o]-an-aZ:I3N2'2WubFkQdS\HfSFktF-;/$Gkp:/*.m3I
%(udWe3@BCZL-s7m(]<8DrO7Q)X%is0\as>R@[)[;2!>OH^d1fkn-i.AaC2,A_,/_(Z/mY\aq+"-)5I;[[N&*>Xo-HK#p4DP&/(i9
%Gf(ND>n@SSm*jom5S$1MhXH/f/HrJ2<PE_;6fZZuYJAgf>X&[;gI*efR#=K_;'d$nP!0$i3<6!7&BMKsf9agYJEJ>D8J]6sBLA>%
%DFT9b18a'lDAO[P9u2HI8gRNu+:&d&>!?$AOHkN]>K*"IXsNC:<2HCTp*O6L`5VgB%rrLp,P@2<OfSX0UQjtra'68O<cMta)35QC
%oFXVipo.Rf&B9k)$o^K'/(9JC%U=0B%0Q1omHe(%P`2(_Lu1l3-XALu-Gk=^$"%#.lFkZ]"ikR=G4=.;1YiZH_H(\:'Wl>uSABBK
%49WJ(Paor`$0KPV4\YthR0Di#@j2*o7,`^R\<3L*]PHM81i5N2p^3Z#OPMH@8?!<abEnG"*=IO@7$cJ&hM'uhMBa5E3975f#1b;^
%YF1@2Z.cN_)#b>aSFC.u8=;Gg.7V?AAbMCP"F)iEq_Z4pd#>?K7&K`a>/H@^ahoB&1gremOC'%]12t:6-(Kl$AK]ZfJhDr.3Ef10
%JG9tg*-HXoWhlOD:#lHBK]."45]MgHOra[OTL6(H=4]qo'kr5p]h$`4r#EBgn@pN;6q"u&l?L.BSgSiq&adD%3=JUuW&i"MA9,?E
%&i(I\<80Yh`8^Y220?Wr5G$'I]nE<43DaBZaLbN/[_\sL$5D(%.t*?^f%V/I7jQJ7F?N;,gG!'9qV_X"D9*Up-B-i+fmJQN9#Lok
%3#jKgFZgcJJCljcP$6Lu/AVQ-N1V[&L'ee>qjm<85(#3BY_I$&OQ>a)R78mnE:R8uats%A0*MI><(e(0%7lOj'Nr].9;g3g.YeZ3
%WFjl*"Zm$#(_&1^8moT:i'rdp'43Xagu;"c'qS(L*^I(R'$*R/8P[2H69tlF55GRbhLZiK@$/X9K+UM3i/Qr8S]JZ5eu"6;<T,Ph
%P4TnS/]-cR"Ue(IPpn;pbJ7mmY"jYsVi&4KM#!;`dNF[2$X2P'&"Ze]9cr7=6-l<:W0>/G*%i$.(m=h91B,0P3l5A]P4D.I@/DS9
%qAKA7S2_GGEl*ug,sTS>+Q)<F5)7W4^A%7"i)g[0;jI35?X(+S$P2D+CiLjD.ukfs70E#c&k<'"(6K1WA/cW`D>:dp":(sO^p"%d
%&@,Af@$$VkFqDa]+rBLh&0NNa&@?Xac:%ah-?)2/K_R#YTf/K@!lhd8n5Pf+OgP_sPlMjQ_#rkO9^W.E+,g1()]A^:>JX9,WXf*n
%blDnT$L*'j;fc4&8bNMDKS\8<j^'*hD#hF<(;^,H+F+K+34tdUq1`,a'-Vi>&*dt[UOW?:OSL%"nma>ch%5]*);&c4\`g,+)A03t
%@>%27g6PP)N+T@HQoUC`pD_clI3i`nAJ'H2=-A94Ul+8FGDF[L@:6lP=4dh>Ht;@B=[[:Uh8$fakTi"2K?+*P7HVt<<"t@<Z2q,9
%,NJ+m.$uDU+NQPF1M\2o$:TM3AYK%Z$n3AC(7Ok&J\nC0R\Ffd`CFj.4Yg8icX72c]EQM,bem4"r%*Ih>WXn+5p4JD%5*Y0Lu6O!
%EeHA=-FY3=)Dm]"""mYeVa<cE$JGF*_I\@:<Sq5^;A'841V_Pj1(#JMS?cu;1/n_FLn9oU\DUgX?Ah0=Ze>16A0tfK[>GTu1@en3
%?@H8oA`Rn4>6s4a$ZXJ+@D/VX4>'49JqB[(i7`3,T@+Ngg8'6um3FBfRuirO=4LK$_,nZgTrI&@mQnVk:E#qV(hbN>7K^lF&suY/
%aXC=?-W:n?44J8(Uld<-OJmZAl/8Ua_aZm^7d<ER8DjuriZ)-5C*<J9oD=b4U,lF$A"b0@e@5h;VK9't\>GBs.DasY3q!uq'Zs?G
%%m;e[5i(d*C9&n-<?l@inW$R%D;6FDVmZRM9o.Lm9ZApu8__Z:!,ZTT,5k8ROWrD<ZXO?Le[CVe.-&nBVsN<I0o6X9[YOEn*\1L.
%e)RKg;qSr.k8WtJ4`X>+$q"[LQ_VX[VD19UG-7oO`2Qf`ZQ'HIEr?1r+pes=CUiq^nq\f00\JE@CILCoo6eS-n60)qqT_IZ,mpK2
%Kr7BJD0^EPFhE-(4bU-RFlnQrNde2NT]dIiJFgZJ!^VRaKMrTF[Q2)2H])8N3c)>\KW?/g/$tYHhC1LJI#Er,^)JJ*=if.1BE@;H
%ioMCdL,fL6<Q;HL%p.=`5hQN)h`s'Vn+!Gk+/O%`'a,WS763*>_@#8o]=Nk"l3UGOfo[5kK`hs$E>eRQ+B8"KkSD[C,9?t_&Tr8-
%/I<-jp2!l`^]BqXN%J77Ku6Um";M\]]<YlI?9e5!_uef#ZLSc9LK#r/"fl(7gk#kQW9,/T\lKa4nL=t$XtGri-UY[+5Mj1`>QGBN
%j=QB'TkXrOWiJbQalHkqIFLH#jQ2Gt)WEC#&WS=jbTKD>?uuNuNI!uP$k>BRO&8Ci&![[H:KO_@YZhK\TieQ)rM[1pRS$<f=L(=f
%KE*EdEoq&cRDU0SjI:6!I*)u?!#;#2J4FrkgQ!4n/h5_PH'$A_hcK^?8\Z:g;O(@pjg/Y*QGfP!J6XI"O7@U.;$.Nb;4o!$iL3X:
%ogSGa&"1B:$-ju]+Bfn?A;*-p"R%3(b/`5kcBH]aO5Hu/*'asc6<t/=%7JX00BF(/H?Y<t=]1/DKM?_;\fsBVah"M]jm-?0iZ:J\
%[8k+pW=>LS<5Sm"Vj<;)'s;<8,.#id+Ua2s%%_X8VS2#(^W#=?:QjKq$Y<<0)bS&Kp^7A=bXUf-+=Oj?a]i9IZoEojk'@5Z(jP$k
%]Ae)^),:/8I/+-]f1>#;.'r0ZY.j4@1J?;-^_@>ggkJN4)\I3=e-IHe/:lE9%PCM]/VdinGX-''NKN83=usI!^tfJrb(]Xsg!J^(
%Y';p8q;N2*5e*utWI+21-'=5I%ch>MNc)qYLal,]HD9X.OGLCXQg_#$.?ZbXhNj661(b^-<#`r*/4_RWLh%KcS42_"2rB*6Y2lr8
%Ie4LM>#Zftpeo(ooOL$WFYH'IIB]EVl3EQK?s&5bXb`'^^u>B=/>7aTETr?cD^asKj4O$91Io,7NF9a-&qkg&'B(1p4'.;&UmFDm
%67*#a6fLZLTf9F&99Z5"$R!aXj[ns]Ju=k;^i49,at4$X)(C&?^.f!rF4LWk]Z<Q4*G8U.Q*G<aW&lT@N4I1n+%SUbiG$#6L#rr4
%]Oc)n1*OhL2Yc)0.eQ8_<s*@LBa,?1CU:-nHt,YNCUr<)/1(ZJ%*?@kIPm?qa](Q`19.@;3ca=K_EaPhW::d/TrQ1CK;TaBXg2UD
%rWY7AE:taH3dtQa+2]d3ed>utJ[!,DCo*pn=P"'$'R2r9<S+Y.ZlUum,Gc_A"i'qs`<?iA"mPQ8)He6sp#9NC*7_#O:DPa]TqQ[-
%jB"N878^,tV5p/C$]/lf/DP.KdPO;%RZQ&AO]<j7gIUJrEC84\F8-ALf&/njP)RQaC:gc<Q]Tai!HOtMoPgOd^:;9`FhBi)G$L;\
%_h_m!#=j<7+b2tVlH_mcm5C1D90M2jP["BQb%D%D=Y_jjd1Z$GGkcN800tUT1#+/`n2foITUd%C!n0+;<AMlH$c?WK1QpVI*"fY:
%F4lM'dU]VL2WT6<gDhhbUoTuUQBR#j23RX;K,=r:(\%%uGAt0=h&knXLCu8=2&EO]8s"fr1B%bK#0X63I6VcmE-V3G?@$:pYOT9A
%dm_M1^4&YP^usF,N_(]?23AOh1^.)<ZpKuOKY#Je8/+VRqehU`*Nhs]/L+!^?pd^.4GkorrW%g3^d/!&+j$r,^:iP2-9hQ@-1Xb$
%/agtQa#=kUfm^6H9d0f:\H=o0VS%F"bf*gb_#e+),CG0k(bqkO5i"o_;bAh]l,m%m&s(S<)[o8,-pB"t"%.a9X/`"q"YIZ<k]=sA
%94Xl'KWWF0nJcN"BXX.DaM*7j7lHM[Etq6*\t[sekmZOR)T>2)%##ZG8/`Bh*!o;65$9!,>GNq`?&bpO?eI9=a7_KMg\\_4POT@.
%.skF;%*pF!"%KSR.t?:u@-</00t[`Q<#-,+TsBV4bRiS&D+K,7gr)0DTI:U*>s_VA_T%_WbB1uBYWmV\ac08nOY@?'US=be+U>hm
%h[GR]=9ek[G96+r3(YWNWmXb$Ut/6ZU=u6H7.?HfgWP*u)2,%_G#;(,D$Zt[1h8-6C<:3o%H=OV%ZD_D_/c6V*>"ZmiJlILd[WR?
%"OthVF<otKGFQ?rTEIp+O\U(W"g\cgC7#JT0$:#8bu_HE2A^(H\/hJ;8.1>-c[\7AUag3aT$4rX^3AWXT$1n&@g-i*"`g3F35#1]
%!-0feB-9!IIYYoHLI<QP)7tM2Ign\>!F.?5KF;1oq!mFCHr(Q3UC;APlLSX#:ccRZ-0u@'e50?^'ahERXons5i#"'DdMikSI/Cs\
%LK*dk:IW>A.KZ<:5*jERf4B@VO5I5uK^Z2a!_oQ'P(g!gCe$$oiELsB!MRJ\Tpkd5=o<+F=%[D!X=k8Ej9+DIhS',<86KGaWn)jY
%Oecc#all2:h-.m(Mk)MVX*M%c$"]q:TU8^uG=>L;=XXZcQY`/Gq0_-$ORK_XT$,H%i,j>amU.0p`%s7B"51umeJs]g3>08UB+/go
%A6Sf>+H+!Gkd0ul\5!;p/o&c&=27.Z9dF1.T'XTA3g;n44i%[g$5A<B/!>HP!!5q@(n+I')+%-D^gFW[&@o9Q@>-[G.U33W&2*-!
%%[mk&jutksHs/ZmY7Ql>dcH<.EX)6QT.Lr9C1,f4!)CCAq[)E[94/Y8+s#G21'`A+hT::TEa5Qe&NKsV)Y+Q(^c_WB^G)Js%[F["
%!'*@$gKCfiftRtjiXB6THX<"o!>KF+fE(QRN(Ur"+]l\j#C)"k`:=m*P9IZb+%Ag]Oe_l<'+L8H#:O+.:N8:BKuidYp'8Zs_>u[5
%"Vg_><Ec!`8+JXi-kSM=&`UmLQbl>)3[*C0,][]g)TaVh7&C"rG.mA."(JM@GJ_ssfb3h3QX,.i9JILGZH(8s@mgu@)/(>'(%),U
%+H["TT[OX,T`mX$L68PSSYuo=`mS%JFUF3SX2^X?-fgU8_GjD=FN\&oU<4\8-HZ%cU%=A!Bh>'c.n@8@Og[NL66jKL1n\X[=YQ>j
%BgZ:QEXg9a6;.i,5d`&&Ng:Ljl*R=!J^ChecqHi!1H&/U2?NgXHNl>I<5`#\5&fR&>?=:)o*F:Xi<dD^dXCr_72bCu?WWJg)RY"%
%+V,i[oj<t)a.HOu-*jq`a56m&h#XPf:a$c)js,Aa8qqVUM2<Dnda^6,d0-C"<_ODm>]NQn[0S=F<q3I"0Kqa5F$ZY@;FZnf#rD;I
%fgpq3"2XipLZ=P%!^p^!Ys[++9s,-Rr_SbZ0J4C8fcKBER(!`"Mj8:uj;J-%@YO(c6XFrolB$qcA8Xh&%RMZj:9ln>ic6l(`F?'O
%\r0G%$HM6='IB)(&RSiI``9qf8ILgtAF;#D4'bVDAcj,fEMN^nY!DIk,=c(!kdqI(SucRi>c=13W="FP/Xrs'jF!#..L5((7-T+)
%Y3J#);I>;825nCbBnRM!KX0[hOq,Ik6Xq_b,>/+3r3\1\p!efaK5=f=;`>&2"TTH\,%#orU;5kDZrm1m5i!jXGGcDi`6AB4hmY`P
%iqj&]-5Jg.a]r@ETp!gfN<_*&KhtG)>7p\].GgD2H\+BK0[^-q3UdIqj$]<Y(l1l%JRA$"-?=2G^Z9]r*tZUlT"Y>"hD](bMo*sG
%<jt\`V;mR3k3;6SWX'kV+p;'pE0U8W"4be@Hm?rECj"RM+a8;Y:U+.CRR^U<huZ,7#iE&cWKS4`s8R549<0D]eXbk)rJ-hT.$5AZ
%)4.%Fp^DlYHXHt>1/31VCiDtC-+EEZpUd$),;SgQeY@#*]dGTk/j&cL/QVV%gr)kl+?]Om3C&gM`'VR!G[k]FCl&GtD$W^88<V[a
%o,e<s+YjbnQN+12$4Apn%2UO;!q81D*Wqg5(NeEAk%b]i6aT<V&gtRpF3Iu[[RX4##\R0DWkRQ0Drcp6bnUndE@.(rn1uudbXS:(
%8ZT%b'u)f5\#?X)fZ/ld8fR(ep)7?>6J)V`fC#.%NcfFB_C:M<3$7+c0gk,WTT?)@B8iAlWQ&P1?p#Xn4O8gHU3#=L7qA5(QPAD(
%&ca79luRF)dp=Q*]qlBE$q"[R]S!rlopg!RKtMASl^#E7camO\B<FTDeoHfs"rS$?lt4t;/Tme$rGbP&F`K#GV&hW*&i#Od^M;*I
%&Ci]RpIsteG-r="\9gdI8^u&VQ77EkdalE3.D8]QnE]Y8@UZu:&]]r5IS-nhZosJhc]10A-&LknpRIVHV9M[OaYRXg-Hq''`V'Bc
%oC8eiqu?Ta&!p\1FNlZk:he3O3Z"e\2'LG\-duC'S9hYd2A?gG-pT.OI6AYd:,]7'_?mNU're`;jk\-4;M,l$]'Ri#=/GJ4&4RA(
%3-;&ilZ\jK7?LSo+MJK@7pNuOcDK^01K*/(L8o6#)b2-dP]qPT46<\@\k\[*4+EJpUNb%`ogY)7)#2obel"o?K)jL3[>8Tkb,c$s
%=s^pRR3tP('Q(FS9MuH]r9^N25-BDR&CgtL'@%Linpc4oKQ5*^cLii4+,DjEJ94t0Fd;c"JmO!N:`(;!?ef$LI#X.?3s>#g^*a%;
%H4VKp'@^qZ:(&'"9auB?(>deU5TZV#au<0Uo"/+N$Kup5[dlsaY_13%IOWh617Q`I'8>+7'+/0U@15/aOO[ReYk'8?&`OXP-JeR"
%*sU+*e@<1p23')'X3*Dp1:27olm($i%[2YU*FQ6fpc/\>$go@t*s['G7pf%aX3P8L6if+SNhj%qKt?M+PD[6+Z_k.43p3WciRTb*
%h-[*'P6`jEE9JekFo:(M,cU&o#7$;o'f1VTo#P3$eaA\',)I0p,nX,g'".rV"8?R*fp`]rd7-nF2>5b<!X[@BWl,;[5jcrs.*[J?
%IaJp$04q0dH%]i\kSiOk^poQg]Nk.V&@fY"UODsG`6'2'"X(o588k/aGW;(foo-2lPSgA45-!gFptGU?aWADheICasBRsZ%U*a,i
%5@i(TRY.HQcW>^n8T7X([[o';eo(bG@)\??M?;J^#kf]Q-)0?uO\<)KNq.%L,]OgUcNJ?HmTPYaQ"Ea/00BCuFcX[Bm'[@n`f0*4
%@D\Yk*)pa7ZH^i%`6WK_0;uY[8XI^_;VDn@i:q]n>ebt;]9`9`9m#h,AM6U7mMeW!LUt%,XY-&kb-pokQTWFF#":MK?Ih<S./)K*
%3eC\1-fW"Sh9V'1ptL(2B+*_!nob0':5nS9arc0&Gb&H-rU%r>7i!kPV&NB,n&T7B%oj2SCYs8nJBVChSuV!3K'n`]<*,/.Tq"$C
%<nRC_dsYuT3rFc,+&gY531akAT)uqaS%;=OSo[;s:<r?MSt#-pl1;4$XO-(O&=JA+/897"YQSLb/LVi;W\!GA&jgQKY!Bphj%j<S
%E"OM)OsK.^#.f:":WpVK1bH)'%\=;!D"i50j^p,j$FcLN<A'/.'6F8da#Fk4Tc2YUZi\nMEoR=#GtiNrNSjdd6!eGhM^#sm,_LXW
%R8Tqtkb<6$No6l(1E0;,n=.>_j+9QGk*D;WL-ARI#r.!-c8mo0_j1).$n!K4[=';s*'*cE"%:^I#>GN9dqm^(9tq4qB=iBp^HR>C
%'be=0ju7YX-L5+^=&6*\'CppP_#elATZf3AJ[PrPG@<M2kJQn46-cJQe"O'/5qGE2-*=oRr"U\1O@51t;BaCa`-n?#)@^q(4J2=_
%V2!$$2t+:QHkA`j/"0;a.k2BsbH7<OVf3Y+#q#DDp+qeeLVOoD:EMmH/a*B=5BZXYGkC+mTo+psHB<9!<l;GW=]is?(#fsiJJ_X5
%:46=`UFamDn[cWQdMgS0[r<hBS*=c`L@5<i[aQ#E6!r13&(bVsnPIYg/gOJCKpC:S?O_"00*@;"jE#N8`aiA(J[iC/l]@?CNog&W
%5L;GYO.aflaZcqfFO0JK#H44gk$EM`ct9FNp_&a[5rtr&="[_UR9HU?JHK61gqRu_2F*T_?(s2?Y$b4#GidOAA%)L`,X4b9NaNp'
%h6[MsBJt`[J1L7JRQ$Jm#%\ThVdCC'd4)FN#I/fDcJ+CjT6oMf3C8+92tQ`(q,cr<Wo6G&HfV3A5<Uaq#<&;qAX`p>=$1M!<J+(_
%4=@K^V[Dj;<sJC9gWGVBc#;q"-4fuWB&,('K6&O[p$]Fq<1i&q`4`(IS4WU\'4GHugRDs:]rlbg$PiNKb68.UN57Ub?3Z%cm]&en
%)\p`cFEKjtpCfOMl#4n#Wf@Ft9@eCVC7Iq647gpVfG&u7%][.BXZZe+kUE)1L/^fqWZgp:9_$V5n1qfg0f>D?=&5s]'!8Gga%$*T
%VE\9D$iNH;ic]SC65pU*3d6Pm(mo6]>7%9@O'q6:`LHA2.fe?P$i1Pq$LQF+UMt[!g\lf@D"mZML+r(?SIumWQ`U'\_(XOQgU/IR
%n0RCD<O51gBtJpBl&T$e\34:'o.KK^VUY"Imh=/r1C>,Gg._fgO0i%+"2(ou,@hIBX^[?9[q?Ct*i'<*ZY0/<=@\#==5#2RE?E)S
%]Gk%P!p,cPR'=WlDi`)->Sq=MrGqf$'S,<;jc79,a!7]C,clM*H$Xk_):K0RfP#1(J?GVJ]U'K_:pc;?dM5ANO;uXH/`7a"8g!dF
%Q;EJY4gHS[0gHHZmrLrXL9+(\U_*f.Se7@e'e,iHoEbJC##pidV&4$f?$c.^Y0`-e?JaXF"@n=:SAR'.cpL`4%i9k+OE//kI.&eb
%%V"TB>,%2<SDLh0#h]k]bfl#C_=L$[H\Sg?Uk`N-KtDFo:is-9`T2jpT-@`WXTXCAMQ_G7r#`rR<!et`S8!_@<_TDVWYRU\;na7$
%\`D6hFt@"mTBf_rhM9W2232nNP;X.[MEeEJkC%C2^V8ed2C"q>jtQfe5k4iI3i--fk/@!HOoKu"5S"b3eHL:_Wdm3u3E<&lJ))&?
%P/cD!%tE"-chS1c7l-TsVb#)#nta2=I9reJ<ihOT7fR4.E`)RC"gUQ>h4fLG=E.3P)JnT7ZTR,-c0)Y6J6jb-5J:;VY)M(MbQ$X)
%e<H_$Vs,U,QYK_!W`iO'jnk30EqVc;G3AUg5#(i>_4r@KZ)`6@[:;uFR%>18`=.T`fW[KFqZJBVIL_EB(Y25R.:QQH*7Z7,aVAPS
%*1U'cCbq4!$.b=Ce@JC3>:Mk^m^&n\RXl##8g39pR`PTAf&g^GJM!k9:W4u!.o]f[,.&`aFj+4oWLJ-end%7O_;9=o"I"&N5pWPE
%G"Z@-P1X[-'l0i$j7,K>b20/aE>NcSl0Z/n*-N4:)PB-@$-'0Pcuf_1_"2VY0UjS7c3pR`AlYD.#G#e:Dpqr_`2.lF[PKmED*+iR
%neSM$c8;Hn_05D4DRm5\lmht5i*YJ?cXW2N\@GRI=<Zl3c1Sme4M1>*7cre*$$GL!j<=D?%;8J\!(]#7s7RAodP%G\cB>1R[&dZh
%0\\.8\BKd>*DmR3Nth`VEU&n.!u+jANi#(<$V1Ah8khh_8mO45/h(kFN_$.*>?f4pDbmc1?.S7H<NT:N;'l.GO"0&<UM+0TS-Dhi
%KI`0]b>`8^63(8qqpO8Jar%/KkU6Bar`j"C-i<!H%E(S%llD6)Z7N#;J<(LHF6+fB`R`aM!d1lbj>uH;Ka24,XDG"SpCoX2Ct%I(
%\uL/CLsr&Z]ie:!LXt^/e2@Z(0OuHocCK/k(Fp>:oF_Hb5Y@19Z:2nJY$j`\kE@>J&2oQ7!)rj7OFEbKa:l8rMWV_T<D!jc/dp6I
%bu?2GH.Vo5bWod^ML]^).6+tace*`3QH_4\7bm!l'-[Btl\!f%7dXQGKmd_`Pte^F1F#oU>C69E/jlZ9j#XRcp$KF5fV6(j:`baa
%jSB3@?k7Rsp<Qa:3K7ij=rO4Nr@rS*0]i&.(]6dLT6W+V*p]^#np2ji)Mq@@hZY<V+1CR2/&nF7CK%3cL:?T_%h(SK0QWT'XH*[T
%>?P<8BB.h%o;ZXOZZI9!<EuVnne"ck-iQ$L)AB;ZJ6t&Bjn=l)oEpW)(\0WLrLA@!otbSCTiS`f'F-MBBdt.Qb;Pe`&#lI[c#G6b
%:&3o5l)E7p316Uif7.6EEeADr8X2KYe#"msa=0NHecf3Pmb1fB6k/pn_eE\%Xi71(.4=V@kH-F;c`r?_\3%''e+L@`W*W3=IMnt\
%(=aBG=4Rm5-C[mO:OL<l*G$#0:%ar+C\44JA[C7"^DjZ)a2cr4'td[NdoP>LYg'*N\>.ripMSH6ID13RD&#sTB%8oD8,[9055dAo
%"j#]Ce1a<UCea%idquA\QaS'SYl2g.UQM3V(9mKu/DIIojmN[3L"i3Mmpb^Nh*(<C/aHZOSMBB6'H_=h?0SZ]rQf9QgF&$eh4]mr
%X"2Lk(:":F.$<Hu<Z.TW1*&^(@a^r`='t(A-a]n$dp_$]iL.@Xjfc*V?f&3K;g#HR07[/lVe`8no^.&Q^iAg-</6Y:0F*8Bd9_8B
%U$^fo*u0Rl!0U:Sl+utfq4L2RFmnWbkSKoj/hdIr19#G#&SUR=QThf832*l\?63CU#*ZuA5rHPLY(j1`KMSj$oH@`^@_GWNnq?3H
%.P>/e3&j;P'K,H9n2[bsW?)RVXb,-9#T*mmUm`Z5C@m&V$f4SQ=HnpqjsmDMf[VdhK?;oe(/_RQ#X(2126Jp=b)&X'Q;0ecd]J%Q
%j;996]Yt^2*PY%\dg%A(XE#?9l,EFA1A^&"$N#B<\&/l#;SoPMBH7>V;*-'pM8SFb0EiCan?j8Lhr5c*U!rK$%7/JDN[$Dr?9HEs
%/nASFrO*[Uf`UF./UH0$-L<cGde,"7WWC54D[ag'J;+cUOto*624J*rRZn$Xa@^iR.P/Ai?B\3:-pA_O-/9UqR5LZQE4UJG6";sI
%91-G%mL.+L"jGk/AE@N]$>s&Ka@5L_[:(Pd-.fT'FSGlohm]1L32mEk4&c2_OP6mDb\_C6D0BkmY5M%-B(1,t\Z+l&dAZd!,u:;3
%m0kIpe0'mCkHmPk>b@osTrnDiofVlhhQZQD0rW+d1',n,5Em@gR:iLeos:KPe3eHE`niS=]E*[YZ/*`ub"r":2MmiEAAh>?@krfd
%(&7V;9XUR3e[`>!M,Mn^P^kZ`\m$+MrPJnP>k=(20@(0@ZI(^/lFca.Q%7-,QTBW9jlarJDlg6^M7$BtioTcY"bSEo69Y[%_lRu<
%>F^+AR;!\$^.+D;AKhH-&M_dI,W-Q[+!@5eM^S$[NMpTA,UA4]>!UWAn49OQm0JWs*OLp!DDT)t%_ITOm?0G.`+<Gl?PdAFo/k9b
%]rfe>nleO-_!uHN:K&H,L`Wr)\SjQ8NiSQrd!N:kZuW2C);n6A!ZVALo@^UoOj5q\BHTl-a'WP[C<8JsJqSB33Ze^m@QKW[P!j_?
%8;puF'L.XS<7M_^?Qo@D&6=?"dbIAL1YGrc@b#`<_F=]HUR='7)_.uNb'o.*8WlE"St:+n/a"rPLV^rm)Bp/<)4$dr*0ur>%,e5@
%%#CEM'IiO#9!)f!C7o)1,MPfYPWdG2A4!2X(j%Lp=AjN50/O0P&mXu?V$2nS]-O^:_@#rA@bXOU2((@PeHfg,IQ[;m"qUn8lWYdc
%9A?l%k[Cl%;g]`7\+g'l3r1NNYXZ6N)"OTMc2jn3TmN1phWO/Acp"8a.ZhBIH,,^*6)Tf/<-a+bQ]tFu)`sK`R1LBX-<83b).d]a
%I*#IKn///THZ2Odbe_pFEUb?tZp<MLoSb#l2sM/ra0eQpgB*`^KGAaGe2\%,b7ZLsg)9W*4h*M=8VJ\)rChp&Eb!^r/:"sKal]g\
%gd]]9)EO6q3PBj7DR^f?p-bjZqI"(#A9Fh$hr[m$Y3/"?@eeLOXi21-\360T/Q*-CXd.Ia5oEh;!PTaY@bW`nr&!uI]g_,C34Ji6
%YS6MIpMC6ghQcP3%R/(EiT5H4#humdmtPP*j7L+rSG!&^%rCc[lPup@Q".OgX4s)sG,3)HglLX7QZ#g_"0EVj1oB%X6kJuIXmDL2
%^;@-*,Y]^n%81F*W?pH5N@C-HGI==a]S2ihm*NJs2k^L_Y"er5<nYs!UF2/^6^;k)$0S2U'rl$-M>:0`Qjp1&qrIk7A\PT7L5(<?
%h!Q>>CZlksY:Fab*UUSiLgQ/?g>cj\"T.Sbc6&Jif-O&`jk0"S!@WGH?H:D[@/%rN>Bss&s79jkPItHc!'2j9]%ICc<KFfG&gGQ;
%a.=WuoRQ0GRE!?MIruqM]PJE*<DMV\F6&8BqQP_&0l&,5d3K%5>'AH.kPR&3&S]LaN[?KEL?^!uJ>"MCIA_ldEg*FO_;e"d&V&Q5
%Kh/fU^%AVBea/4I24RNDqRQBU\j4q@BN;N,+RR\#W=ZUdL[27^\0p17iYj#m@'h5.ZV#C:BP`LE.]4u\R"G9EKJJYV49.N;Yq6q:
%Vh;sdb@n6!0C.1.Ak^S/b4m4W!KK5Q'Wp'fb-'dUr1#JFT-j636W96(\sPm:_35^jmdJ&p.^\hVSdCJi)J+bGGWgloPUJtA%FXU[
%3V<R=pu0aiFQron">e[R/BW!-A,'mpF-M9*E".q#kHjo9QJD\SC9F_q#2DbPa/a5cb%$YC#1d@0GCgp:;QA/!]KN*9HWNV-H+:0G
%Rt/<]].B@k=hS`.2s#SFl]`E\r0J5@/_"AQDIi?V3hkUc%<c3@^+d#.8OpruXH6AN61u(nJmuI1;qGLs\>uAj9RO]30q9mg*f;(B
%VP-F?J+n`F`.82Y6>Eu_@VSbs<U[Vcq6tY1R&T[lhUu]PB"?!.r4r_/lr08(._Y)(c[<4/##BuD7r'&/D#M8FL("64Y=>":_G^3@
%L`0T-"KPiTB9/2Q"K5sT^'hJB+kpe>ki'V$Qu>Q96!8ka6RjE2J`eM;T3U2UXnK;.0:/S\Z]`T1f#:.BWWpG:1aT`lO\k>$.'6Tn
%j^LLT1r=6IRADW'(JfoRgWL(a2O>2@:qG=XFn:ONS!nc0!hpd:W3?DWl`rG7hND;eSM$n9r[,L!r`4!&LVlgK/@E479IbOTP(-Uh
%U(2"Rj%U6sg/Ze3MmAh\_lB^QKgJj\d?979ge1PFCY#sR.*?L('j=+Rr/;s'Z=`E2(6uA<DULPXa%)5n+:sg[O6q#X=o-[RR9h:p
%Rkn/45MIQR^s@;>XbN@:iUZlVD";.sEjF9)*p0q[D?=kKU[>\TU0Y"kHg5@>jW9m%C$GLI7?lCVeQ,-r\+8>FU=aE,e3"X!:Uh7_
%3^:)e4(u7U#?%dDXisBn:9CQ@W7'C[pW7P:b6-,oME@Ug/,61teA20UC?UnlpM)@(dlq.+"WFb5,tej*W/7pDJ"`o2WVb/@L#OD>
%'Y<-/<IkoePn3ehiJVY&M#Cl!$dk)LN(%=4eF%Md?=Ic@Fl$hO+(#UZB^K#"/L<RuqpsMt+q7'TL![5PIZiu.6:V%=OW:;'DbMXm
%bMYD:D)i!ZHT68UoodKdX,8-:`-AK\@CZm*=tWT7/fVUtdMc1d_cIIeF[B>`<EZ*lTcJTaN3$/GUYnLs!oS'i%ZXS2:9*roL@nM]
%oEFkLmlN@IQl"rn!i@S25%PiW"b44S"A4'=c$,HueLkcASMHVl'WpI0<DJkH<d4ZodC)cCju!-V<@30jAdA:rP"j>Kq!8Wao/o\"
%Yu:9;p3=RM\.NYhhjOQHgrG_U4D4Nm)M@VXVlBs"4Jmd!s-Pd0]oTW?DU$;ED'^MRiOrIrJ6_R/.NBtEcM%MC"6k&HPE&AfhtBtR
%45dC48Gun<hjjhER=,Q\(COhd*.?`4nnI>m\BfgJC_3i&iVDt;D]$[<OkQVcU$P`WNd%JL-/IH7:V&)%;dE+?+<pO^-YM$Mnhhj"
%]+p8u-'2;s(4tHAPI;BoQ#B8hkTFa]>ak,fJJOOjkR_V5%0,F93/[-`?&jpd50hisN'!h,BVjL%dmq=VgtXnQXI,F:Au4UH!IE_Z
%BKBrsl$i&Xh6W=;ljjn/&4OUa>)o=FAaI]<r9[?'Nm_!UhX,F"U9Jd0NN3+'aR+-O!/G!kqe*ps4Ej:j0f<p+DKkR@[*C-%!R9(2
%14>ncF5'I)bJ'1/"O`]]%h&$#q7"N^F6R`$I5ZrY'&hLE!o%n%lf3bq$"$@`0na`l^0'DcD0H<]G.a%#3"TP@44E>#88:A,\KZj4
%F*C_OPN*+aB@C7=be"7YLmY_)Q_O[a6-jHjQ-Pr9B/eG#I9Y%R60hX6Zccs,Eh1sfm4KL(_FdP;Y[d\)2uc`#jD`K$I\o_a39%D+
%\uk2Y[OOt<h7,BA>=*q:mp>MH-2RCF[C3sL?keH7*8!eK/_-Q95A.RRL2EVZ\0PFg:;5!kAC<=$d.2G3=T`u38'91;/!R!<:q@uJ
%hcZ(@Z^@`plu`KW9[[l$YG/"e]P@)7kK49T$KQ'FEI.7RRK[`.#pm.SI(3gE=1u>`<MV:'-Udna^H8)$7.<aJd^p,,pJTNi2W42^
%Y=@\YjN0WIk3G(h";f%78jkeepsmW]Wlq*,Z#rUQ$34l^EQ/[)cNhD99<#LnH:_a[eU;fp85j[?QW'T)EPPVKa\[RI=D59TXu%Z1
%&o_D"oP3C][&W=/Ku#?-k+D!^^W_Z)-Q:.r[8g!]I&]Z3;T@7OS^ZUGJg1jo0i"G^,S^s)p+oBOOsKQhJN)ea/W%o7WO=+TL3:u\
%(*X=f3-s0hp%rYB291d(5Wr$6eXRf/JiOGtLL,><FV7*7LnI$N`<.WL=GaV\_`Y:BA5S1_Z^PoR6SeVql.cVX1<>LOEqN]nnhZJ0
%Xtra"3QbO5/%kJ+ZA$>f[qbpQU>G4G]O+uTWI@8h,sOe*.@!p46Ii`'7lRJdUbOi@@eqKipPH4J./S,!XVfXX'`"KSr-k)'l0YmJ
%FH3O3cP4@0^7n):iq%4GnM.fA[&E`>NJD<7<Z/fDj2c!Tn`sM?P(H3sZ"cUV:>=d"\c9XL3&^m2!Bhnseo#J=h>,]$<IJ@q47BaI
%2E*$p#l>so,6Zb-cU-BSX3.,tkTZBW:Q?\GA0**,l,>56O.uR>6!_DkY8#YumB2'^`=/`)LB\<<+kP`''Yi<Sm!rm-.Re&XJloM=
%;;ini?dCT0PW3#gC5[?&=a-tq-#Mf7V&KHCd#GN!kVl""0)TjS:cI2=$o!%gJ2*N)%Gm1::esJ_pi$47"jBhYP%#feEpq;-@$qbu
%;ZJUN+Mt3P>#d7K^B!1)@R353K;,lq\42;,LEGAp-eQqqYr?#D3G71l%"D1JPXf'BUW3h'&U36Iia+k!E(=h<19ETnZS'NqQX<!H
%l=rP&jA"&T^JY4_VS*_'Y!.ir#QW0sWWD<UfSNg#dZV6>6`t1LpAs&!'#E$POFCMOIELXVW]p)r7EgHQTWdb'l"GL16\FTkGEP!n
%^a1V+bDp8kU1D+b<<B574*]k0F3H=i$<a1ITWXW:8c]RXVjAS=.FMNS;"00/Rc1#8]`'eUikf^1ihB/^,VT?s8,$]*Hl7?QW71ZN
%^="Z+<#2FNrJ7Ek(No<6A=c_]".eMU,ZrLY1N4cDX'$m5UI_'R--<F3>LX\aGuPGjN*T/,G<%r\O@*hf^Sm-k6u$\k'AU?lo`Y$,
%/3;\F\k2)S<`-^3&Z_qi3=!pBQ1m:8%=^P8.27rFGL;lC:,>Fe>7l-ernFi&G`27M(O4LN4>qeJ7af"\A;]"%^?UeK^[48a/rdE-
%CfHSOj0>.(dnF]7^10Mpc3K?jkC/4ds%ZkgIb9V<GA`16ZSZ^Y:G.l`kM$;E^6j9-<X&9m/T(=ck.pVl=4C'9*r8D$6FOEd[?UN,
%.JS=i1\D<B\%D=)R]!?r.7`[Q7sjMt\lJ<uC6`PJJFcqO=bbX!EUlJ<NulYg[u+7n[(X%r&+jV&M<B<7WKZ!''cJs$\'HF#s''$P
%eE'7]Fa?g?*NHXUKA8)FWb5S448gi:7Z?rDGsB4ud_e`+GIY53q,.<2iccJ7o3PBiZ^`hFbRupA%c$7;I]O&?qUf)GmidB%qY$$c
%1s9HSUjcr5QV>;4GKhDU;e-,.U1=?fI&i;M%d*)<HsXmdaL5Tg)%m[%$Chgul"XB=iPUPJnkck(j>O4BO_>8K4(p6.ZED\3$'1eK
%\jEqN;0<)+F2G_FZ.,FR0CVT5X:_M_)3=kdK-`N#Qp48BnbPTZ[7k/[,r5+'?3USlCu?'OONkqBU;.\nVm71$[N:\Q=UeO@;hg?6
%O]LDE6_FXY-':ueohfKoJW-V*BsVGOZiZdaSu&npmOIX)SR4+;nM;bn_O$l2j')N8?@cTI8+JgYB90V5R/!pLiqZGdTjj;\D[0#T
%Pr>OrUJF!c:1GY&StE>@)n*`W]dQd+U^Yhk&S!?i\\<+7nZ:>#d*IFdOgS3MiNl5TL/Rs[KjJQPiLcFK[O+8Ai,`aV7KA>WRSsT+
%lsol,1%K7k<J$:5VgL.p5sMQ#0DO_\LfKV<0#NY^QYIAE8ck^kI338VV<eAN6*m718l3C''qH&t%l"$ViX6qJ:-pG:A49jQE!@K]
%!bR`9lO1&6q9,H:1Q+O^UO"t8L*7S,eR@j$`P$ur*1Pp=QV?e`g=l#u<u4MhZPnMSmZt`?7hGJnE-Q\BLMH=/*`6IZ?lo37+girE
%&457_=+5ZpQA_H,jj)<1Rp\`W48Y=]K4r19e?\$rk0N*^_b2q\,jUKOo):h'/[:4C<&1@"N`kD.UlG<M4HPA?gL^Kapq"f$/b+5.
%hh<U.ri:`#M3#&.6oe'PEt.eAgm`_kQ%fCQE:!qq8<?$dXoVj#Ie:@bP\A+N=Z^RK`n)gXhA6@nZ'R]!*S@%IOkNe]]"&;(Dhe`G
%VQS%IDRrX8XAh<GYD)8G*s!L2=TV#pc#:AmB)V.c+KG_r<"?lQ_$V'=h((S53e,fC-2N^oK(=X3i\<-l2jK0Z__b>7pS^Ke-sR8l
%Pm=1R_!?K!ndX9&Q%rNeS$_nbLOV1rPWR+>TI=<3`!kiR6pB8%rbRk)jE[m#pdc.NWdkV]'s)1R;$4tJ&\!OSqtZ"_X=?7grt`k_
%W[_&Uqo+Tb4K)ZY(r>-.@k)";Vpj]k*eH;F*rhGgE&,tA;V(>tJg%.dl0-]5<.D==,V?1QHe!"ul<GQBd<P6FGn^P_*.C!/V#m4N
%*`DrOM4^=i[kLpb$j_Q#U6aJ57J"io:Q-E,)2#"V35K2oO:ZM@V`37Z1_*\q,ukcCVICfK$-,uo<C%4Hqh#uV!TDW/30t[LhCEgs
%_?=Y%gmks%ei+ud69o8b<-]Q6pba;0a0iZoD(4(bEePTHiEQJ%$'/Mte*Bj9dBpHS1"9)BWt%fpcHjb/Cb4/Rg-`Q/]eHp!:d.jK
%\Cco(_AUtZZO487M>PkiOIEk*!lbhI=JnQp07MDoR"UGf/PhnH1#)KTR8f_?%IE]MI[D,:+RD6epcZu0&UaFZ4l>ibe]M6I_"pEs
%jZ#g::(7Bjf[u0!=Y`TYnW?K%!NX0nVG>XPO,tpC.4,:GT9b3Pj6^JY0K_htD;rX'G3a6(r@(F4HN1=No/WMA4CO]"kR&=3B:[i:
%p1K-]'WsFJcbn#r6`aN[TA0NWV$@&qmk,Z#>J&*#71Cf1L\((*KaW%]_,EdK)J6^9;,R:uY/I"D)R+ubr`!9uD-mD:k;D:9!+_06
%+FG1s8Xe=4-$fG2P1HMK`)IA<M8_f3]7OC]]5%*OH^UZJ_.]PuNG&=tO^)`JS3+3H^\5B^.=&cFjm$;']%SNuCONlu71I66T1MFW
%jblpIr[n<$n%Y'+_$=SKmtF-,,r9k2n@k=o#LHe7`kRa_%`g@\p6NU,@oNrR:a"anR;4j=gkCE6Mt-L%D9La0j[h"":b[DU+s0E_
%CoT`\r.hYPoN8pdc7'GYZJ^V/=_VI1%>1Zdk"G+(JGB2^Xp;($pC:45OVn06!*%qlGfCAP#<=Is7rX3RPBMt0=lrh=;=(!n3S(j,
%9='2i]kt(?&:T$5`E614Rh4SKXp:OF:)DQin2aoWh9dQ]:%PNPYa]tDVQDK;ZXcTI@!#^*ZUqIF>6$bOm]Z^lWOs"%WM"N9KXF0L
%P7,r?W(e*X+!B=PS<:2WN6j6u%J*FfJF'dQ\B/2^?n$(tk0RCd=5LZ12@\LV+`7m%S]nXU,r)7dLEYG"?]?b:!.P8KPBa:._"3)R
%=t;4A&$s73)rh:>^9r<@jkl`QQoe!)qR-nf$?"S+?(lEFp1\F/Q_^5)Pf1iplXCig3$;2KUp_;<6G$lUSi)Y<Rlkm98TDS9g2%g7
%-.pE]ZlO%H,J`=n<PV6d>ilrm>!d<;(>QJH.lNjA:#uYDc#Xk.W>r&BhGmX>s,kL%iUdT45^;KX7:gMC:IQ_+WGSLr7?VOWS1M3g
%/W=EsYk4HT#"N^1:!4b!9?VZ\MKmb-BO2Pm*%tg6<g5Es,M72:M"%.,Ilo>4+imkC0/<]:#.e3SmuekRPLbP*0e&d$?_+#`<+Xpj
%=pP.pQG@:Xb$&CW"S$[L0]b4nTDN>!\^O(l!`?].KSh:FSX^4;g:)eME/<2+"U(m2IK]s;GckT,W%q:=$bDg9oVCB3rA2O^KfSZ9
%?9k(MJkJY587^5AL5LK6"6SgtrVj*al1/[7\J4n'KU@X3+-,]d5:uhbJ5t.tV<[5PZlq<X%H,>oY9s`3)M2lSAt^k`"X05j7TJPU
%=s+tgeL`fD="H@C[=:".8"Nt!9mTE^K/Hu5nr<cY'0'8hn>ta\O[km(bX:#YL$WULkP6fgM;EnM\oudf&'s?7M6QF@Lls*VR4&]u
%(TGY[-DoF_PUIgrmg8e?VkA:+:]6rH*['pE.b12Nm&KnEo?sXFgfWPQct7>u_&.,G#eJulim1:eTpcajSSRuIl(CpTi>lXE\5,N^
%^r=\=do2n/52Es4"qTQ_D=c%Y<)O1hWQT1I&2!/Zi)B!B$<n[c;+3\aY(:".44Vm%OlHLWQ6l(?bN(QsRSu4/.@IS92&aB;IiY4p
%MTEs`K!a!8fF.hK=W#tY7T#GnhIonLf'L4#_,+IE8k5N/Kc6l&5Ks!R6q`0Ol46\^P)>/k!;])qZ6b$,!SM1DK!1348d>C2!hbYq
%4_5`cBYB24kmCqh"r0>-Bj^dp_dks2<79;K!*(LCa`tLBmEP&"lW3ph'7`X0IO5k\GfBS+AT:@+TC5]CW_"r-Y`s]Pr`KZc*"D0.
%Ke<.=mYPUYoXh6I!b99@X7r-an&MB1F6\IW3@:C=bG0hOdpoOLe0rb@\n7pq8J9OIF$$<\1r&LJ-7$@Hjs')3m2HV+E4g$dGs^`&
%[@8&YfQOoBb2(WiT*r4"Vho3LoVad^:=<3=R%-(@-Ys#bUC"s'33Q^@R>j4e1^2DV/\Y#p^oP*C@m`IO@QL*[6hH/U/C(`%U!<j4
%AEkD)B4#7S&"V8J]LOp2VNPcuP>)K7-d$D!;bJSWOaDO,;c-pL6\gEA"Y8>4Yb@C`^LWYS>BtjpLJKmP4Len#DRY/5';pV)?PY-j
%DH"WI@MbnXpQ"N>9=^YGP@Dkk4LfBf5o?2rm@odIP+_b7KPoTkZZ0dG+:P"I`m(M^E(qP1H2fe\['/kcVC1.5WDfOk?lKJniVOQ5
%KeLV%&27L\KRB-t5M8amD(KK]\o?N/ZIpH`!berPZb4k_5&cPDSH_CQZ@>'W+b#l^eVYt<[j<J:m1NPeXN>FC[3B^oP*s3n=>2L3
%U=GMc-N+*2P(PNa0^GF=/S#rgXJb/R3ut+U@%#5gdSrL#OKXntR(]'%49u['5>A[CZ!$B>b9]3Kk"@STS12umW)nl?FKu1VnP3E?
%Is7i+XN]mS2AKDNUnI668(fH98Bu;ROe\#2E`NRQrP7n\_(5%B6nLIc+kJ>ao1QOlF#83mi=Pm+d<)C]N^cbh]<>dBWC6Z$JWlC6
%(DaMKNT-)]_O&Jncg-HKcaCfT1$=Ik?!2UfdZ621'slDD7'4a@3%,ERq/^6o#qhsQ1WKYo(/sZO/.)dnSZ'st/QfAOFj(q>>t&Ql
%b/V6Of,eJ^nL*tc.gh%'hE`)H!hq4]&l:6q[g[9_n,(`D8^]6Ee.Y_YmT<m`+m)\f1gb&siC8JGWQWC4+t?2bDD/KfRlBT-WtF*A
%C.Ye#?-Ju-<V;.\^%>TP(6R_SE(6])Jc[b"i#nt[e_TJFdH_E!Ai\T9c>fq]$trH+fOe_la!J^R?m<UdURY9]<c[0ZE.B*(F4G'b
%W[e44fcjK&kq@<r`uNhK?`VoWC`XWtlfR7KD%8,eJp0-<7+tMVG\D`KAdb'96.O-I-9(1K8<H!'%Ca;0W6GN8Jp@$I_3C_cZOr`Q
%`&r=2%0Jr,:3oQH1*eFTpsokKbVk]c^%-GE`+BVN:\.p$X"AI4(2VK2l'SO+c=iE;=R>bt>W7#QQBoHQdg2p'4b-qGki,X+BY5mO
%q6t9pq&5M0OG1q3V9tfCQZ6E5":JX,03@f7ApAn2m;l!bbS6FgEFQ"FCE5])Dpj!tPt?11_7-`8fkKCUVa[cHn^(PGkO'4h.N1k*
%ERr9E1Bi:Fk-tnn?VHrdGSBlQ.6P3)i7f]Kr!C?t1c8@"*6]R=CqHQa'p#PidE18Vo(4@tQjiR7X#M5t\hR23#;>gCgKasf[?;#6
%mcICXlY5@d9rcq7i_khGK2Q\=S_?.MVY5*S]HTMrh:B2eGi+)DBt%W&/"Aoug4r2$ZL-PR,l>'.YD5lZ2('<^Q.e-9UujCUpBamD
%Z.fc?8mLpIBF8#1V5)!fg"&"]c'QV^!L/C6fi5&X9c.&T:\2#e'PFM]/a(,`il5JTW[.Ykos'K6AZh5!qje:.gJ3Y'lhYcu@`/rI
%To47u(]pi5R&-MWK1)!'%-c"TpNR8a&o4TWOGYK$9[!uHkpU>$_3-.5>tSuUOf!FFp#ZSE1;VEC_U>YgE0?._hMmO`V,5Jg1qH0<
%nGsokaJ#4iZ't=EluKX+SCjY9p#0qPPfhXS?[XZ"%52C6c;Q"53@@FB5QagSqF^?s^[eJ%(q(lXN9iRm+Z"I3YtPYA\6g,9%.91\
%'tn/K$K>\&22!nO8!ub,XSJ]0`qn.7O16I!ecX/h]auGNC+`0[1"9<b5)[0@Cc^#lrG(TUZ9kNEd?J'=j;c5iLX=&>ZoD!+0_X5;
%Y#5G@qB6#]fJeOReWe'CW3qEE3p61;%[n/(0jSm]%#&'u]nqSu.m/+r#ur+?,B9nHC5mt`-<_Qf;"e1hbm'r<#c11?Rfm]Do(s[\
%R4St$>7cZgl-E:[+mfPs#RFeY4jd$XB,NuA[X(r/*S*h70S\MP/p4?K:a\;^o.c0"Y[uArj_%smhN(S;.WN>GHNgB7bhsNbI8k=(
%YKmdS%^D"A''t1`c%0cIX6_VJ\pH(,4OYh:h\S\H0rTNp_SK!3pXN:6><:Nn2?<*s?j(PcOK<?sY0$b7;oQ@e^CeDjpGUPeXsrpR
%Q?s]%')N)n7jtjU.3O&-+%L$=)RB7U;-utmn:!,AeB%LnL5tNPO1B(jC*q20)iPCu]XQIRW0b6aQ2t@.GZ-q.<4%Fh;BWd-)G@!M
%06`@t=,F5?o$Q>oidB^^;,p2V%G;A/2\WE8s8&ji[7eedj@tb(n^ahGVRfhuR[ins0Be1(>UaZDYa<YU/L/Z2I'qk`&Z<K0n%?-^
%&V8UJ\(bQmn\`rHJ=cMh>ds1)!V'I->Wc$P"A1s>JkSOXEu62sFBC3B&gtQ^3W2atr`mIl;:X&UbVD=E=r?N5))V:u4I%/CVh5Dm
%?-^&0N>I_[\68@2)+lslCLK9dg;kod.&$q>i!I/`E;o7f$hCIF8AYc?N#q(p.r6nc0\<MTJkf6-AftO%+B2s*d_/!_3a/B#kT%qd
%!7Ho]He_!O.:M/9n;-dW3s+?V6'U,?h1@52b*e*(6VmuI$U8K_D?f=V+^-TA(%6LIXC0CgV?tmA7e-_<UF*HG:?bM+&\bL<Y/Z@Z
%MBU`lf4:b86+'#[kX](t<m6(,T@f_F/:?<o+&SN/4SclfrU*rp9MRh.=cVEOilUHW%S0F"2t'iVgo"(c2k"%ZH^iL;Q4egGn)9P<
%:@6cJGA/\9RP#Bu,*Ej:GD-)<8_cZ;6eCKULIY`\VunL32htAk_I8]m6PTsUp-"p3EV>bR"#KA=QB/q<`=.jl(nA-R;&%g^qK/fY
%s,*`'%QIh^?JXkBHe^bI]QknZ;f0"mcO@[>3!07R%[u%Z!!54>n;SH>#)7+8)(EE75M-QH'aicpC_$:8\.j"6Gj^H@f@5$ErcdLq
%7*Qrc!)qpg727(-O0UeD+$U[dn+<gi,n-"ZWirao[k(;78dM0a^a)iu!qD$u2V5ip/-WE;%*W!1dha7aQhbNu4^BOJK<eq1g_>rD
%3bL]L<_7Rg^aJlonS4"fC-lWPm]JY^ljgkHp,!eZJcA6t&uMmR0]j"h'F3kD)lX)#6F7&-D3IK6'Wj2.#:G-<WjP<]pck.A=DuMN
%FP/#BoR:/q1?W5-3E9dMIXh&JmN_^3[gNg)po7n2D)V"nob)c.8f[<GKD?F\'He:l!iLqD%"g%oCF5dd1C6,G6XC`"T\WI5Vq'Tj
%SOTE<T\'QH)?@mGTcnll][h#2Gu`N]K'pbjdI3F-W@2aa<.'=sj\YE/69V&tb!Vg6r,'\%8t?=YiHc2+f8ME4MEkBe;@@ts2?,u#
%=H02fg([(FFBHsa4aG$M7!`tTlD88Xg\e^E&KRl!Z^q*t/qKUCX`gg_Cd>c,)#UIq)A3t:M*YO"Bt-P'54PNQSf:8coAPIQG*@g%
%&.+/-&tK(-I![AuS.F61:>UY)C0uFohB+8H4Xa0.6g>h:SF;aF./]5@;K;'p+A6$9iU:@`;EH-,r$lZb(#3L+FX>;,P=Y2Ke#l$h
%.n9rqQ!YuB)c"^J*[k3i3T^1@>P[C+WQI$5!C.aA.'8PO"aXSfp,3X$57*2*m/eC1-b7*i+NYLD9F8<,*8C:^XC&)uo["pRoSR/R
%YD:N$CWbo2\5Vs2aIC4ST6Y't/9iI/k!>^p6L&8TR3DLnR7CHlIV5Z+k*R!I+I^K`4I\cJiV:mRkoB\2Ol,sl#"*<>Z((&;OK6"N
%\-XJ"fog-\Tc$>SF/DEaE>2/jJKBhgk@;HSdpGJXhB2uJ>ei[i7`'8sWmsG?8WAuVT[6u5KC"HTG8;[\ArOFQfOqT('p7X`+=Z(D
%K,m"^Y'?FqNUb`bhR@Ho/WitDZ[!9ZX^+o6:h_7(VY#!F8*oYgQLFpjGeMuo7Js:#p@e8i;4R=7T6<l9\)+tZ](N0"JEJk/RAcG2
%-GqX!9N4U^gnaA=!?DJ)MKD$MLMKNB"GB_n+Xa27ic/-7!YG*QV^U]qKMujei?_h"]Kbg"mI/l,F+F#Fen9C0hO.r3*T?ak:>ibU
%C8lf#18Ps"g82,ig`@+$Us41pV1K]<]s0^01mmuJIr1!Rk'2+\f+6C<E]p#&,l:f4E";;beG=bmTDC-[33!^%l`-j[pY,?jSQJ:;
%irHIK7&@%4-%kHZUo#fG'e-UHqbl0;YIKr;m(:Bca*^b9L[t7c6q0E*+F8<'X-CR78-@5hBY0teT!!:B#ik2]\,7&+PCGPo#3Xhp
%rT^n]ldgq%EHu%^mic@C2uGN=X(fFk[+6=-3;!p[)5H%F#2KaK,BHcH8t1X>Vmo`FWKuG4R;CF4V/,iu!)"6ak]FZD'11?;KI'Xq
%kk=Ef`m+QHl:Pc,_+SO.8"P4"\e35r+!0m3'/U1bh8ajcNlq5!A`/0ZEdu(\g;!BJY)0EG\^-k7NiD-m-Wsm7EBY.*^U$M;Q:s<-
%;T@IK/'Rm)_:=YPB@4D"A=$o8`7e4kgo%gJZ2I)JIAO[H;^LIpG$_d`dkgjt[MSu4RJV.ke?XN?TfimJ-#L@sLCHD<N"j'hRiHN2
%ijh,Sj419_3g;gk,\:IMD")sj?>+W%<_>Z'Lrh7qU=*oJ:^!QcEY$U2YYTi[_REEF%RnofBGFeem=YRa\\CkNN.PY(So*=CWO?DZ
%40;[D8-1oM.](!i3\P7ur'ME78XO=lD7lBtPOc"uK%^n(m@$L!>e+BtkRPts[PQToEhSQ<g2oe![sURG"J&MDgFCLY\hXeR'8!f;
%;r5M6S#litaS$o(Z-W?6ctGPgYXsELO9Ina0G%i`4en!NGphUUqE.;^FVkN$cF9?^SEu$uIHB?u$<LUbBmq`rdA7A,Ng$m-J$hHW
%&5t]?3;VZl5<8$an42*"e^&[aD''g-Z>'0;muS4jWV_=u'I`=pHWED-]WS_(V0T;)[lMt@gI+-oP,PT<[=-l$.3EI9XGC(@p74J8
%,F<hn.+Db-ESjiT23n0nJ1<`65\7'7WX:q"hJAgXGj*i;\&KcNNla8TbN:5WA$533:VgB8TQrd;2KI#O43.2`Q\2rAG6bGMXq\CE
%o6=1TMX:P+?76\/rAHPsoE4D%9IGhPOi[lt6sRn%].:;k'+hr,.fc?P$lHuG:]nU.h;^L^i&<4GMYcO'2Li^fhb].W?#"R#8S\X$
%f*XDbi-01Jp4/&J)'Fqk18DJ'B[82XUY?cOd65dMilQ_'M/X#/,O1S,aQV(u`T2TB=ncUQpM"QA$*Zs&L??S)\(JsobQ6-T(5*t+
%4^qr!gS-\M59*>7Gkr["=:lDTWSAIYBe+;Skmc@`3tOL.o8>TT>c.qk_i,bW@;j\9T,DHABrOh8'p;DG^?51B"W`L\X=M?mpJlW0
%6M.>P.:f.u_O,)SZ'F^i&V/8`3rOX^:d^p8EJkRYJO]fOg(j<Ya_i&Yi)!L!=kt;ni,CZm0]Pj,5<"kh*fuO71="a6>Ued2=ND98
%![%8r-!Pr)%P6J'/RV%<H?k1o5-OZBkd!V1*Ob`\'0dE_CP=^3@\j'4`B]Y8kk-N.6:PJ7l].qU:d;-8mXiTi.c(4`TEWe5[j!h1
%F`(kpnK)/g-&lPFLqde>hBGKY^G17>S;ABg=CJ69886!O;UQ;jP!7.BMHi0Z-K*63Sm_i/dH!Dk4G&MZ`$6I<6,p`sFa%Y3ASCKC
%#^Jp4OB8*.Zk.N64ee\&Q9YYETbjQJ.>5G<1dDgMZXcLFFDX;GH\[!%rahV4)&E?8/a"^9'WHder7VE7IC1o`B2hK;UC.<E`NCJ\
%dI\%218mIrh)Q;V'U]b^L<SM`BR$uH<=OBs6'Lb5Bgb\&!t08,Nfn'[FTX>BW!Sk=."UA*VtRfD`9'uVd2f"8V%Lo(Si$U6gDdWC
%co/'(L\L#aj$%nR\!:Mec?;@g4O-[[:J[tHF+C!mU+!Y;%_$9&)40"t2kr=dHhT3)$0Ur:#:\DtSl)7e["iobkm[1=O1RX:e+\;q
%jTH%L`(-1".(EoO"THFlD3:&WZ3=JkkmYdP:Rfb$mBp/c7lEXo*q:@il195>GrF(LhHN%]G<]qm`2Bg;p*if3ofrHG%tFEds7uN[
%s7Z2:s8)?eqrQEos7mu9dsq>lDnl4Z?[r'Is6H"Ys7hAarU]40IeiR+huE\:J,T;K?iKfcT>(6jf3eOQYCHKHbEm_XO+7(78b>O=
%&,u4!J,:o!l&U>hs&=iVRK~>
%AI9_PrivateDataEnd
